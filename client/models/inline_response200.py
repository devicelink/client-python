# coding: utf-8

"""

    Manages devices through Devicelink.   # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse200(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'status': 'str',
        'ack': 'int',
        'do': 'int',
        'values': 'InlineResponse200Values'
    }

    attribute_map = {
        'status': 'status',
        'ack': 'ack',
        'do': 'do',
        'values': 'values'
    }

    def __init__(self, status=None, ack=None, do=None, values=None):  # noqa: E501
        """InlineResponse200 - a model defined in OpenAPI"""  # noqa: E501

        self._status = None
        self._ack = None
        self._do = None
        self._values = None
        self.discriminator = None

        if status is not None:
            self.status = status
        if ack is not None:
            self.ack = ack
        if do is not None:
            self.do = do
        if values is not None:
            self.values = values

    @property
    def status(self):
        """Gets the status of this InlineResponse200.  # noqa: E501


        :return: The status of this InlineResponse200.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse200.


        :param status: The status of this InlineResponse200.  # noqa: E501
        :type: str
        """
        allowed_values = ["acked", "unknown"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def ack(self):
        """Gets the ack of this InlineResponse200.  # noqa: E501


        :return: The ack of this InlineResponse200.  # noqa: E501
        :rtype: int
        """
        return self._ack

    @ack.setter
    def ack(self, ack):
        """Sets the ack of this InlineResponse200.


        :param ack: The ack of this InlineResponse200.  # noqa: E501
        :type: int
        """

        self._ack = ack

    @property
    def do(self):
        """Gets the do of this InlineResponse200.  # noqa: E501


        :return: The do of this InlineResponse200.  # noqa: E501
        :rtype: int
        """
        return self._do

    @do.setter
    def do(self, do):
        """Sets the do of this InlineResponse200.


        :param do: The do of this InlineResponse200.  # noqa: E501
        :type: int
        """

        self._do = do

    @property
    def values(self):
        """Gets the values of this InlineResponse200.  # noqa: E501


        :return: The values of this InlineResponse200.  # noqa: E501
        :rtype: InlineResponse200Values
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this InlineResponse200.


        :param values: The values of this InlineResponse200.  # noqa: E501
        :type: InlineResponse200Values
        """

        self._values = values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
