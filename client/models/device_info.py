# coding: utf-8

"""

    Manages devices through Devicelink.   # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DeviceInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'time': 'int',
        'id': 'int',
        'model': 'DeviceInfoModel',
        'serial_number': 'str',
        'firmware': 'str',
        'metadata': 'object',
        'activityout': 'int',
        'freshness_window': 'int',
        'last_rcv': 'int',
        'permissions': 'str'
    }

    attribute_map = {
        'time': 'time',
        'id': 'id',
        'model': 'model',
        'serial_number': 'serial-number',
        'firmware': 'firmware',
        'metadata': 'metadata',
        'activityout': 'activityout',
        'freshness_window': 'freshness-window',
        'last_rcv': 'last-rcv',
        'permissions': 'permissions'
    }

    def __init__(self, time=None, id=None, model=None, serial_number=None, firmware=None, metadata=None, activityout=None, freshness_window=None, last_rcv=None, permissions=None):  # noqa: E501
        """DeviceInfo - a model defined in OpenAPI"""  # noqa: E501

        self._time = None
        self._id = None
        self._model = None
        self._serial_number = None
        self._firmware = None
        self._metadata = None
        self._activityout = None
        self._freshness_window = None
        self._last_rcv = None
        self._permissions = None
        self.discriminator = None

        if time is not None:
            self.time = time
        if id is not None:
            self.id = id
        if model is not None:
            self.model = model
        if serial_number is not None:
            self.serial_number = serial_number
        if firmware is not None:
            self.firmware = firmware
        if metadata is not None:
            self.metadata = metadata
        if activityout is not None:
            self.activityout = activityout
        if freshness_window is not None:
            self.freshness_window = freshness_window
        if last_rcv is not None:
            self.last_rcv = last_rcv
        if permissions is not None:
            self.permissions = permissions

    @property
    def time(self):
        """Gets the time of this DeviceInfo.  # noqa: E501


        :return: The time of this DeviceInfo.  # noqa: E501
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this DeviceInfo.


        :param time: The time of this DeviceInfo.  # noqa: E501
        :type: int
        """

        self._time = time

    @property
    def id(self):
        """Gets the id of this DeviceInfo.  # noqa: E501


        :return: The id of this DeviceInfo.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeviceInfo.


        :param id: The id of this DeviceInfo.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def model(self):
        """Gets the model of this DeviceInfo.  # noqa: E501


        :return: The model of this DeviceInfo.  # noqa: E501
        :rtype: DeviceInfoModel
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this DeviceInfo.


        :param model: The model of this DeviceInfo.  # noqa: E501
        :type: DeviceInfoModel
        """

        self._model = model

    @property
    def serial_number(self):
        """Gets the serial_number of this DeviceInfo.  # noqa: E501


        :return: The serial_number of this DeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this DeviceInfo.


        :param serial_number: The serial_number of this DeviceInfo.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def firmware(self):
        """Gets the firmware of this DeviceInfo.  # noqa: E501


        :return: The firmware of this DeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._firmware

    @firmware.setter
    def firmware(self, firmware):
        """Sets the firmware of this DeviceInfo.


        :param firmware: The firmware of this DeviceInfo.  # noqa: E501
        :type: str
        """

        self._firmware = firmware

    @property
    def metadata(self):
        """Gets the metadata of this DeviceInfo.  # noqa: E501


        :return: The metadata of this DeviceInfo.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this DeviceInfo.


        :param metadata: The metadata of this DeviceInfo.  # noqa: E501
        :type: object
        """

        self._metadata = metadata

    @property
    def activityout(self):
        """Gets the activityout of this DeviceInfo.  # noqa: E501


        :return: The activityout of this DeviceInfo.  # noqa: E501
        :rtype: int
        """
        return self._activityout

    @activityout.setter
    def activityout(self, activityout):
        """Sets the activityout of this DeviceInfo.


        :param activityout: The activityout of this DeviceInfo.  # noqa: E501
        :type: int
        """

        self._activityout = activityout

    @property
    def freshness_window(self):
        """Gets the freshness_window of this DeviceInfo.  # noqa: E501


        :return: The freshness_window of this DeviceInfo.  # noqa: E501
        :rtype: int
        """
        return self._freshness_window

    @freshness_window.setter
    def freshness_window(self, freshness_window):
        """Sets the freshness_window of this DeviceInfo.


        :param freshness_window: The freshness_window of this DeviceInfo.  # noqa: E501
        :type: int
        """

        self._freshness_window = freshness_window

    @property
    def last_rcv(self):
        """Gets the last_rcv of this DeviceInfo.  # noqa: E501


        :return: The last_rcv of this DeviceInfo.  # noqa: E501
        :rtype: int
        """
        return self._last_rcv

    @last_rcv.setter
    def last_rcv(self, last_rcv):
        """Sets the last_rcv of this DeviceInfo.


        :param last_rcv: The last_rcv of this DeviceInfo.  # noqa: E501
        :type: int
        """

        self._last_rcv = last_rcv

    @property
    def permissions(self):
        """Gets the permissions of this DeviceInfo.  # noqa: E501


        :return: The permissions of this DeviceInfo.  # noqa: E501
        :rtype: str
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this DeviceInfo.


        :param permissions: The permissions of this DeviceInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["read_only", "write", "owner"]  # noqa: E501
        if permissions not in allowed_values:
            raise ValueError(
                "Invalid value for `permissions` ({0}), must be one of {1}"  # noqa: E501
                .format(permissions, allowed_values)
            )

        self._permissions = permissions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
