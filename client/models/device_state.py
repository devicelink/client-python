# coding: utf-8

"""
    Cloud IoT

    Registers and manages IoT (Internet of Things) devices that connect to the Google Cloud Platform.   # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DeviceState(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'binary_data': 'str',
        'update_time': 'str'
    }

    attribute_map = {
        'binary_data': 'binaryData',
        'update_time': 'updateTime'
    }

    def __init__(self, binary_data=None, update_time=None):  # noqa: E501
        """DeviceState - a model defined in OpenAPI"""  # noqa: E501

        self._binary_data = None
        self._update_time = None
        self.discriminator = None

        if binary_data is not None:
            self.binary_data = binary_data
        if update_time is not None:
            self.update_time = update_time

    @property
    def binary_data(self):
        """Gets the binary_data of this DeviceState.  # noqa: E501

        The device state data.  # noqa: E501

        :return: The binary_data of this DeviceState.  # noqa: E501
        :rtype: str
        """
        return self._binary_data

    @binary_data.setter
    def binary_data(self, binary_data):
        """Sets the binary_data of this DeviceState.

        The device state data.  # noqa: E501

        :param binary_data: The binary_data of this DeviceState.  # noqa: E501
        :type: str
        """
        if binary_data is not None and not re.search('^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', binary_data):  # noqa: E501
            raise ValueError("Invalid value for `binary_data`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")  # noqa: E501

        self._binary_data = binary_data

    @property
    def update_time(self):
        """Gets the update_time of this DeviceState.  # noqa: E501

        [Output only] The time at which this state version was updated in Cloud IoT Core.  # noqa: E501

        :return: The update_time of this DeviceState.  # noqa: E501
        :rtype: str
        """
        return self._update_time

    @update_time.setter
    def update_time(self, update_time):
        """Sets the update_time of this DeviceState.

        [Output only] The time at which this state version was updated in Cloud IoT Core.  # noqa: E501

        :param update_time: The update_time of this DeviceState.  # noqa: E501
        :type: str
        """

        self._update_time = update_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceState):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
