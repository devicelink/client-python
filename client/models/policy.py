# coding: utf-8

"""
    Cloud IoT

    Registers and manages IoT (Internet of Things) devices that connect to the Google Cloud Platform.   # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Policy(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'bindings': 'list[Binding]',
        'etag': 'str',
        'version': 'int'
    }

    attribute_map = {
        'bindings': 'bindings',
        'etag': 'etag',
        'version': 'version'
    }

    def __init__(self, bindings=None, etag=None, version=None):  # noqa: E501
        """Policy - a model defined in OpenAPI"""  # noqa: E501

        self._bindings = None
        self._etag = None
        self._version = None
        self.discriminator = None

        if bindings is not None:
            self.bindings = bindings
        if etag is not None:
            self.etag = etag
        if version is not None:
            self.version = version

    @property
    def bindings(self):
        """Gets the bindings of this Policy.  # noqa: E501

        Associates a list of `members` to a `role`. `bindings` with no members will result in an error.  # noqa: E501

        :return: The bindings of this Policy.  # noqa: E501
        :rtype: list[Binding]
        """
        return self._bindings

    @bindings.setter
    def bindings(self, bindings):
        """Sets the bindings of this Policy.

        Associates a list of `members` to a `role`. `bindings` with no members will result in an error.  # noqa: E501

        :param bindings: The bindings of this Policy.  # noqa: E501
        :type: list[Binding]
        """

        self._bindings = bindings

    @property
    def etag(self):
        """Gets the etag of this Policy.  # noqa: E501

        `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy.  If no `etag` is provided in the call to `setIamPolicy`, then the existing policy is overwritten blindly.  # noqa: E501

        :return: The etag of this Policy.  # noqa: E501
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this Policy.

        `etag` is used for optimistic concurrency control as a way to help prevent simultaneous updates of a policy from overwriting each other. It is strongly suggested that systems make use of the `etag` in the read-modify-write cycle to perform policy updates in order to avoid race conditions: An `etag` is returned in the response to `getIamPolicy`, and systems are expected to put that etag in the request to `setIamPolicy` to ensure that their change will be applied to the same version of the policy.  If no `etag` is provided in the call to `setIamPolicy`, then the existing policy is overwritten blindly.  # noqa: E501

        :param etag: The etag of this Policy.  # noqa: E501
        :type: str
        """
        if etag is not None and not re.search('^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', etag):  # noqa: E501
            raise ValueError("Invalid value for `etag`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")  # noqa: E501

        self._etag = etag

    @property
    def version(self):
        """Gets the version of this Policy.  # noqa: E501

        Deprecated.  # noqa: E501

        :return: The version of this Policy.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Policy.

        Deprecated.  # noqa: E501

        :param version: The version of this Policy.  # noqa: E501
        :type: int
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Policy):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
