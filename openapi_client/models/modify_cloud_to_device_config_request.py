# coding: utf-8

"""
    Cloud IoT

    Registers and manages IoT (Internet of Things) devices that connect to the Google Cloud Platform.   # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ModifyCloudToDeviceConfigRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'binary_data': 'str',
        'version_to_update': 'str'
    }

    attribute_map = {
        'binary_data': 'binaryData',
        'version_to_update': 'versionToUpdate'
    }

    def __init__(self, binary_data=None, version_to_update=None):  # noqa: E501
        """ModifyCloudToDeviceConfigRequest - a model defined in OpenAPI"""  # noqa: E501

        self._binary_data = None
        self._version_to_update = None
        self.discriminator = None

        if binary_data is not None:
            self.binary_data = binary_data
        if version_to_update is not None:
            self.version_to_update = version_to_update

    @property
    def binary_data(self):
        """Gets the binary_data of this ModifyCloudToDeviceConfigRequest.  # noqa: E501

        The configuration data for the device.  # noqa: E501

        :return: The binary_data of this ModifyCloudToDeviceConfigRequest.  # noqa: E501
        :rtype: str
        """
        return self._binary_data

    @binary_data.setter
    def binary_data(self, binary_data):
        """Sets the binary_data of this ModifyCloudToDeviceConfigRequest.

        The configuration data for the device.  # noqa: E501

        :param binary_data: The binary_data of this ModifyCloudToDeviceConfigRequest.  # noqa: E501
        :type: str
        """
        if binary_data is not None and not re.search('^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', binary_data):  # noqa: E501
            raise ValueError("Invalid value for `binary_data`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")  # noqa: E501

        self._binary_data = binary_data

    @property
    def version_to_update(self):
        """Gets the version_to_update of this ModifyCloudToDeviceConfigRequest.  # noqa: E501

        The version number to update. If this value is zero, it will not check the version number of the server and will always update the current version; otherwise, this update will fail if the version number found on the server does not match this version number. This is used to support multiple simultaneous updates without losing data.  # noqa: E501

        :return: The version_to_update of this ModifyCloudToDeviceConfigRequest.  # noqa: E501
        :rtype: str
        """
        return self._version_to_update

    @version_to_update.setter
    def version_to_update(self, version_to_update):
        """Sets the version_to_update of this ModifyCloudToDeviceConfigRequest.

        The version number to update. If this value is zero, it will not check the version number of the server and will always update the current version; otherwise, this update will fail if the version number found on the server does not match this version number. This is used to support multiple simultaneous updates without losing data.  # noqa: E501

        :param version_to_update: The version_to_update of this ModifyCloudToDeviceConfigRequest.  # noqa: E501
        :type: str
        """

        self._version_to_update = version_to_update

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModifyCloudToDeviceConfigRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
