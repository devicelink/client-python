# coding: utf-8

"""
    Cloud IoT

    Registers and manages IoT (Internet of Things) devices that connect to the Google Cloud Platform.   # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class X509CertificateDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'expiry_time': 'str',
        'issuer': 'str',
        'public_key_type': 'str',
        'signature_algorithm': 'str',
        'start_time': 'str',
        'subject': 'str'
    }

    attribute_map = {
        'expiry_time': 'expiryTime',
        'issuer': 'issuer',
        'public_key_type': 'publicKeyType',
        'signature_algorithm': 'signatureAlgorithm',
        'start_time': 'startTime',
        'subject': 'subject'
    }

    def __init__(self, expiry_time=None, issuer=None, public_key_type=None, signature_algorithm=None, start_time=None, subject=None):  # noqa: E501
        """X509CertificateDetails - a model defined in OpenAPI"""  # noqa: E501

        self._expiry_time = None
        self._issuer = None
        self._public_key_type = None
        self._signature_algorithm = None
        self._start_time = None
        self._subject = None
        self.discriminator = None

        if expiry_time is not None:
            self.expiry_time = expiry_time
        if issuer is not None:
            self.issuer = issuer
        if public_key_type is not None:
            self.public_key_type = public_key_type
        if signature_algorithm is not None:
            self.signature_algorithm = signature_algorithm
        if start_time is not None:
            self.start_time = start_time
        if subject is not None:
            self.subject = subject

    @property
    def expiry_time(self):
        """Gets the expiry_time of this X509CertificateDetails.  # noqa: E501

        The time the certificate becomes invalid.  # noqa: E501

        :return: The expiry_time of this X509CertificateDetails.  # noqa: E501
        :rtype: str
        """
        return self._expiry_time

    @expiry_time.setter
    def expiry_time(self, expiry_time):
        """Sets the expiry_time of this X509CertificateDetails.

        The time the certificate becomes invalid.  # noqa: E501

        :param expiry_time: The expiry_time of this X509CertificateDetails.  # noqa: E501
        :type: str
        """

        self._expiry_time = expiry_time

    @property
    def issuer(self):
        """Gets the issuer of this X509CertificateDetails.  # noqa: E501

        The entity that signed the certificate.  # noqa: E501

        :return: The issuer of this X509CertificateDetails.  # noqa: E501
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this X509CertificateDetails.

        The entity that signed the certificate.  # noqa: E501

        :param issuer: The issuer of this X509CertificateDetails.  # noqa: E501
        :type: str
        """

        self._issuer = issuer

    @property
    def public_key_type(self):
        """Gets the public_key_type of this X509CertificateDetails.  # noqa: E501

        The type of public key in the certificate.  # noqa: E501

        :return: The public_key_type of this X509CertificateDetails.  # noqa: E501
        :rtype: str
        """
        return self._public_key_type

    @public_key_type.setter
    def public_key_type(self, public_key_type):
        """Sets the public_key_type of this X509CertificateDetails.

        The type of public key in the certificate.  # noqa: E501

        :param public_key_type: The public_key_type of this X509CertificateDetails.  # noqa: E501
        :type: str
        """

        self._public_key_type = public_key_type

    @property
    def signature_algorithm(self):
        """Gets the signature_algorithm of this X509CertificateDetails.  # noqa: E501

        The algorithm used to sign the certificate.  # noqa: E501

        :return: The signature_algorithm of this X509CertificateDetails.  # noqa: E501
        :rtype: str
        """
        return self._signature_algorithm

    @signature_algorithm.setter
    def signature_algorithm(self, signature_algorithm):
        """Sets the signature_algorithm of this X509CertificateDetails.

        The algorithm used to sign the certificate.  # noqa: E501

        :param signature_algorithm: The signature_algorithm of this X509CertificateDetails.  # noqa: E501
        :type: str
        """

        self._signature_algorithm = signature_algorithm

    @property
    def start_time(self):
        """Gets the start_time of this X509CertificateDetails.  # noqa: E501

        The time the certificate becomes valid.  # noqa: E501

        :return: The start_time of this X509CertificateDetails.  # noqa: E501
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this X509CertificateDetails.

        The time the certificate becomes valid.  # noqa: E501

        :param start_time: The start_time of this X509CertificateDetails.  # noqa: E501
        :type: str
        """

        self._start_time = start_time

    @property
    def subject(self):
        """Gets the subject of this X509CertificateDetails.  # noqa: E501

        The entity the certificate and public key belong to.  # noqa: E501

        :return: The subject of this X509CertificateDetails.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this X509CertificateDetails.

        The entity the certificate and public key belong to.  # noqa: E501

        :param subject: The subject of this X509CertificateDetails.  # noqa: E501
        :type: str
        """

        self._subject = subject

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, X509CertificateDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
