# coding: utf-8

"""

    Manages devices through Devicelink.   # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DeviceInfoModelStream(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'key': 'int',
        'read_only': 'bool',
        'time': 'int',
        'last_value': 'object'
    }

    attribute_map = {
        'key': 'key',
        'read_only': 'read-only',
        'time': 'time',
        'last_value': 'last-value'
    }

    def __init__(self, key=None, read_only=None, time=None, last_value=None):  # noqa: E501
        """DeviceInfoModelStream - a model defined in OpenAPI"""  # noqa: E501

        self._key = None
        self._read_only = None
        self._time = None
        self._last_value = None
        self.discriminator = None

        if key is not None:
            self.key = key
        if read_only is not None:
            self.read_only = read_only
        if time is not None:
            self.time = time
        if last_value is not None:
            self.last_value = last_value

    @property
    def key(self):
        """Gets the key of this DeviceInfoModelStream.  # noqa: E501


        :return: The key of this DeviceInfoModelStream.  # noqa: E501
        :rtype: int
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this DeviceInfoModelStream.


        :param key: The key of this DeviceInfoModelStream.  # noqa: E501
        :type: int
        """

        self._key = key

    @property
    def read_only(self):
        """Gets the read_only of this DeviceInfoModelStream.  # noqa: E501


        :return: The read_only of this DeviceInfoModelStream.  # noqa: E501
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this DeviceInfoModelStream.


        :param read_only: The read_only of this DeviceInfoModelStream.  # noqa: E501
        :type: bool
        """

        self._read_only = read_only

    @property
    def time(self):
        """Gets the time of this DeviceInfoModelStream.  # noqa: E501


        :return: The time of this DeviceInfoModelStream.  # noqa: E501
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this DeviceInfoModelStream.


        :param time: The time of this DeviceInfoModelStream.  # noqa: E501
        :type: int
        """

        self._time = time

    @property
    def last_value(self):
        """Gets the last_value of this DeviceInfoModelStream.  # noqa: E501


        :return: The last_value of this DeviceInfoModelStream.  # noqa: E501
        :rtype: object
        """
        return self._last_value

    @last_value.setter
    def last_value(self, last_value):
        """Sets the last_value of this DeviceInfoModelStream.


        :param last_value: The last_value of this DeviceInfoModelStream.  # noqa: E501
        :type: object
        """

        self._last_value = last_value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceInfoModelStream):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
