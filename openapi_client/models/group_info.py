# coding: utf-8

"""

    Manages devices through Devicelink.   # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class GroupInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'time': 'int',
        'metadata': 'object',
        'devices': 'list[str]',
        'permissions': 'str'
    }

    attribute_map = {
        'time': 'time',
        'metadata': 'metadata',
        'devices': 'devices',
        'permissions': 'permissions'
    }

    def __init__(self, time=None, metadata=None, devices=None, permissions=None):  # noqa: E501
        """GroupInfo - a model defined in OpenAPI"""  # noqa: E501

        self._time = None
        self._metadata = None
        self._devices = None
        self._permissions = None
        self.discriminator = None

        if time is not None:
            self.time = time
        if metadata is not None:
            self.metadata = metadata
        if devices is not None:
            self.devices = devices
        if permissions is not None:
            self.permissions = permissions

    @property
    def time(self):
        """Gets the time of this GroupInfo.  # noqa: E501


        :return: The time of this GroupInfo.  # noqa: E501
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this GroupInfo.


        :param time: The time of this GroupInfo.  # noqa: E501
        :type: int
        """

        self._time = time

    @property
    def metadata(self):
        """Gets the metadata of this GroupInfo.  # noqa: E501


        :return: The metadata of this GroupInfo.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this GroupInfo.


        :param metadata: The metadata of this GroupInfo.  # noqa: E501
        :type: object
        """

        self._metadata = metadata

    @property
    def devices(self):
        """Gets the devices of this GroupInfo.  # noqa: E501


        :return: The devices of this GroupInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._devices

    @devices.setter
    def devices(self, devices):
        """Sets the devices of this GroupInfo.


        :param devices: The devices of this GroupInfo.  # noqa: E501
        :type: list[str]
        """

        self._devices = devices

    @property
    def permissions(self):
        """Gets the permissions of this GroupInfo.  # noqa: E501


        :return: The permissions of this GroupInfo.  # noqa: E501
        :rtype: str
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this GroupInfo.


        :param permissions: The permissions of this GroupInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["read_only", "write", "owner"]  # noqa: E501
        if permissions not in allowed_values:
            raise ValueError(
                "Invalid value for `permissions` ({0}), must be one of {1}"  # noqa: E501
                .format(permissions, allowed_values)
            )

        self._permissions = permissions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GroupInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
