# coding: utf-8

"""
    Cloud IoT

    Registers and manages IoT (Internet of Things) devices that connect to the Google Cloud Platform.   # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DeviceRegistry(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'credentials': 'list[RegistryCredential]',
        'event_notification_configs': 'list[EventNotificationConfig]',
        'http_config': 'HttpConfig',
        'id': 'str',
        'mqtt_config': 'MqttConfig',
        'name': 'str',
        'state_notification_config': 'StateNotificationConfig'
    }

    attribute_map = {
        'credentials': 'credentials',
        'event_notification_configs': 'eventNotificationConfigs',
        'http_config': 'httpConfig',
        'id': 'id',
        'mqtt_config': 'mqttConfig',
        'name': 'name',
        'state_notification_config': 'stateNotificationConfig'
    }

    def __init__(self, credentials=None, event_notification_configs=None, http_config=None, id=None, mqtt_config=None, name=None, state_notification_config=None):  # noqa: E501
        """DeviceRegistry - a model defined in OpenAPI"""  # noqa: E501

        self._credentials = None
        self._event_notification_configs = None
        self._http_config = None
        self._id = None
        self._mqtt_config = None
        self._name = None
        self._state_notification_config = None
        self.discriminator = None

        if credentials is not None:
            self.credentials = credentials
        if event_notification_configs is not None:
            self.event_notification_configs = event_notification_configs
        if http_config is not None:
            self.http_config = http_config
        if id is not None:
            self.id = id
        if mqtt_config is not None:
            self.mqtt_config = mqtt_config
        if name is not None:
            self.name = name
        if state_notification_config is not None:
            self.state_notification_config = state_notification_config

    @property
    def credentials(self):
        """Gets the credentials of this DeviceRegistry.  # noqa: E501

        The credentials used to verify the device credentials. No more than 10 credentials can be bound to a single registry at a time. The verification process occurs at the time of device creation or update. If this field is empty, no verification is performed. Otherwise, the credentials of a newly created device or added credentials of an updated device should be signed with one of these registry credentials.  Note, however, that existing devices will never be affected by modifications to this list of credentials: after a device has been successfully created in a registry, it should be able to connect even if its registry credentials are revoked, deleted, or modified.  # noqa: E501

        :return: The credentials of this DeviceRegistry.  # noqa: E501
        :rtype: list[RegistryCredential]
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """Sets the credentials of this DeviceRegistry.

        The credentials used to verify the device credentials. No more than 10 credentials can be bound to a single registry at a time. The verification process occurs at the time of device creation or update. If this field is empty, no verification is performed. Otherwise, the credentials of a newly created device or added credentials of an updated device should be signed with one of these registry credentials.  Note, however, that existing devices will never be affected by modifications to this list of credentials: after a device has been successfully created in a registry, it should be able to connect even if its registry credentials are revoked, deleted, or modified.  # noqa: E501

        :param credentials: The credentials of this DeviceRegistry.  # noqa: E501
        :type: list[RegistryCredential]
        """

        self._credentials = credentials

    @property
    def event_notification_configs(self):
        """Gets the event_notification_configs of this DeviceRegistry.  # noqa: E501

        The configuration for notification of telemetry events received from the device. All telemetry events that were successfully published by the device and acknowledged by Cloud IoT Core are guaranteed to be delivered to Cloud Pub/Sub. If multiple configurations match a message, only the first matching configuration is used. If you try to publish a device telemetry event using MQTT without specifying a Cloud Pub/Sub topic for the device's registry, the connection closes automatically. If you try to do so using an HTTP connection, an error is returned. Up to 10 configurations may be provided.  # noqa: E501

        :return: The event_notification_configs of this DeviceRegistry.  # noqa: E501
        :rtype: list[EventNotificationConfig]
        """
        return self._event_notification_configs

    @event_notification_configs.setter
    def event_notification_configs(self, event_notification_configs):
        """Sets the event_notification_configs of this DeviceRegistry.

        The configuration for notification of telemetry events received from the device. All telemetry events that were successfully published by the device and acknowledged by Cloud IoT Core are guaranteed to be delivered to Cloud Pub/Sub. If multiple configurations match a message, only the first matching configuration is used. If you try to publish a device telemetry event using MQTT without specifying a Cloud Pub/Sub topic for the device's registry, the connection closes automatically. If you try to do so using an HTTP connection, an error is returned. Up to 10 configurations may be provided.  # noqa: E501

        :param event_notification_configs: The event_notification_configs of this DeviceRegistry.  # noqa: E501
        :type: list[EventNotificationConfig]
        """

        self._event_notification_configs = event_notification_configs

    @property
    def http_config(self):
        """Gets the http_config of this DeviceRegistry.  # noqa: E501


        :return: The http_config of this DeviceRegistry.  # noqa: E501
        :rtype: HttpConfig
        """
        return self._http_config

    @http_config.setter
    def http_config(self, http_config):
        """Sets the http_config of this DeviceRegistry.


        :param http_config: The http_config of this DeviceRegistry.  # noqa: E501
        :type: HttpConfig
        """

        self._http_config = http_config

    @property
    def id(self):
        """Gets the id of this DeviceRegistry.  # noqa: E501

        The identifier of this device registry. For example, `myRegistry`.  # noqa: E501

        :return: The id of this DeviceRegistry.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeviceRegistry.

        The identifier of this device registry. For example, `myRegistry`.  # noqa: E501

        :param id: The id of this DeviceRegistry.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def mqtt_config(self):
        """Gets the mqtt_config of this DeviceRegistry.  # noqa: E501


        :return: The mqtt_config of this DeviceRegistry.  # noqa: E501
        :rtype: MqttConfig
        """
        return self._mqtt_config

    @mqtt_config.setter
    def mqtt_config(self, mqtt_config):
        """Sets the mqtt_config of this DeviceRegistry.


        :param mqtt_config: The mqtt_config of this DeviceRegistry.  # noqa: E501
        :type: MqttConfig
        """

        self._mqtt_config = mqtt_config

    @property
    def name(self):
        """Gets the name of this DeviceRegistry.  # noqa: E501

        The resource path name. For example, `projects/example-project/locations/us-central1/registries/my-registry`.  # noqa: E501

        :return: The name of this DeviceRegistry.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DeviceRegistry.

        The resource path name. For example, `projects/example-project/locations/us-central1/registries/my-registry`.  # noqa: E501

        :param name: The name of this DeviceRegistry.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def state_notification_config(self):
        """Gets the state_notification_config of this DeviceRegistry.  # noqa: E501


        :return: The state_notification_config of this DeviceRegistry.  # noqa: E501
        :rtype: StateNotificationConfig
        """
        return self._state_notification_config

    @state_notification_config.setter
    def state_notification_config(self, state_notification_config):
        """Sets the state_notification_config of this DeviceRegistry.


        :param state_notification_config: The state_notification_config of this DeviceRegistry.  # noqa: E501
        :type: StateNotificationConfig
        """

        self._state_notification_config = state_notification_config

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceRegistry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
