# coding: utf-8

"""
    Cloud IoT

    Registers and manages IoT (Internet of Things) devices that connect to the Google Cloud Platform.   # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class EventNotificationConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'pubsub_topic_name': 'str',
        'subfolder_matches': 'str'
    }

    attribute_map = {
        'pubsub_topic_name': 'pubsubTopicName',
        'subfolder_matches': 'subfolderMatches'
    }

    def __init__(self, pubsub_topic_name=None, subfolder_matches=None):  # noqa: E501
        """EventNotificationConfig - a model defined in OpenAPI"""  # noqa: E501

        self._pubsub_topic_name = None
        self._subfolder_matches = None
        self.discriminator = None

        if pubsub_topic_name is not None:
            self.pubsub_topic_name = pubsub_topic_name
        if subfolder_matches is not None:
            self.subfolder_matches = subfolder_matches

    @property
    def pubsub_topic_name(self):
        """Gets the pubsub_topic_name of this EventNotificationConfig.  # noqa: E501

        A Cloud Pub/Sub topic name. For example, `projects/myProject/topics/deviceEvents`.  # noqa: E501

        :return: The pubsub_topic_name of this EventNotificationConfig.  # noqa: E501
        :rtype: str
        """
        return self._pubsub_topic_name

    @pubsub_topic_name.setter
    def pubsub_topic_name(self, pubsub_topic_name):
        """Sets the pubsub_topic_name of this EventNotificationConfig.

        A Cloud Pub/Sub topic name. For example, `projects/myProject/topics/deviceEvents`.  # noqa: E501

        :param pubsub_topic_name: The pubsub_topic_name of this EventNotificationConfig.  # noqa: E501
        :type: str
        """

        self._pubsub_topic_name = pubsub_topic_name

    @property
    def subfolder_matches(self):
        """Gets the subfolder_matches of this EventNotificationConfig.  # noqa: E501

        If the subfolder name matches this string exactly, this configuration will be used. The string must not include the leading '/' character. If empty, all strings are matched. This field is used only for telemetry events; subfolders are not supported for state changes.  # noqa: E501

        :return: The subfolder_matches of this EventNotificationConfig.  # noqa: E501
        :rtype: str
        """
        return self._subfolder_matches

    @subfolder_matches.setter
    def subfolder_matches(self, subfolder_matches):
        """Sets the subfolder_matches of this EventNotificationConfig.

        If the subfolder name matches this string exactly, this configuration will be used. The string must not include the leading '/' character. If empty, all strings are matched. This field is used only for telemetry events; subfolders are not supported for state changes.  # noqa: E501

        :param subfolder_matches: The subfolder_matches of this EventNotificationConfig.  # noqa: E501
        :type: str
        """

        self._subfolder_matches = subfolder_matches

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventNotificationConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
