# coding: utf-8

"""

    Manages devices through Devicelink.   # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class DevicePropertiesStatusPredicate(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'operation': 'str',
        'locked': 'bool',
        'test_property_index': 'int',
        'ref_values': 'list[object]'
    }

    attribute_map = {
        'operation': 'operation',
        'locked': 'locked',
        'test_property_index': 'test-property-index',
        'ref_values': 'ref-values'
    }

    def __init__(self, operation=None, locked=None, test_property_index=None, ref_values=None):  # noqa: E501
        """DevicePropertiesStatusPredicate - a model defined in OpenAPI"""  # noqa: E501

        self._operation = None
        self._locked = None
        self._test_property_index = None
        self._ref_values = None
        self.discriminator = None

        if operation is not None:
            self.operation = operation
        if locked is not None:
            self.locked = locked
        if test_property_index is not None:
            self.test_property_index = test_property_index
        if ref_values is not None:
            self.ref_values = ref_values

    @property
    def operation(self):
        """Gets the operation of this DevicePropertiesStatusPredicate.  # noqa: E501


        :return: The operation of this DevicePropertiesStatusPredicate.  # noqa: E501
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this DevicePropertiesStatusPredicate.


        :param operation: The operation of this DevicePropertiesStatusPredicate.  # noqa: E501
        :type: str
        """
        allowed_values = ["match", "no_match", "equal", "more", "less", "between", "inherit", "is_present"]  # noqa: E501
        if operation not in allowed_values:
            raise ValueError(
                "Invalid value for `operation` ({0}), must be one of {1}"  # noqa: E501
                .format(operation, allowed_values)
            )

        self._operation = operation

    @property
    def locked(self):
        """Gets the locked of this DevicePropertiesStatusPredicate.  # noqa: E501


        :return: The locked of this DevicePropertiesStatusPredicate.  # noqa: E501
        :rtype: bool
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this DevicePropertiesStatusPredicate.


        :param locked: The locked of this DevicePropertiesStatusPredicate.  # noqa: E501
        :type: bool
        """

        self._locked = locked

    @property
    def test_property_index(self):
        """Gets the test_property_index of this DevicePropertiesStatusPredicate.  # noqa: E501


        :return: The test_property_index of this DevicePropertiesStatusPredicate.  # noqa: E501
        :rtype: int
        """
        return self._test_property_index

    @test_property_index.setter
    def test_property_index(self, test_property_index):
        """Sets the test_property_index of this DevicePropertiesStatusPredicate.


        :param test_property_index: The test_property_index of this DevicePropertiesStatusPredicate.  # noqa: E501
        :type: int
        """
        if test_property_index is not None and test_property_index > 255:  # noqa: E501
            raise ValueError("Invalid value for `test_property_index`, must be a value less than or equal to `255`")  # noqa: E501
        if test_property_index is not None and test_property_index < 0:  # noqa: E501
            raise ValueError("Invalid value for `test_property_index`, must be a value greater than or equal to `0`")  # noqa: E501

        self._test_property_index = test_property_index

    @property
    def ref_values(self):
        """Gets the ref_values of this DevicePropertiesStatusPredicate.  # noqa: E501


        :return: The ref_values of this DevicePropertiesStatusPredicate.  # noqa: E501
        :rtype: list[object]
        """
        return self._ref_values

    @ref_values.setter
    def ref_values(self, ref_values):
        """Sets the ref_values of this DevicePropertiesStatusPredicate.


        :param ref_values: The ref_values of this DevicePropertiesStatusPredicate.  # noqa: E501
        :type: list[object]
        """

        self._ref_values = ref_values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DevicePropertiesStatusPredicate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
