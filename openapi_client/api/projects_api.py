# coding: utf-8

"""
    Cloud IoT

    Registers and manages IoT (Internet of Things) devices that connect to the Google Cloud Platform.   # noqa: E501

    OpenAPI spec version: v1
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient


class ProjectsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def cloudiot_projects_locations_registries_create(self, parent, **kwargs):  # noqa: E501
        """cloudiot_projects_locations_registries_create  # noqa: E501

        Creates a device registry that contains devices.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cloudiot_projects_locations_registries_create(parent, async=True)
        >>> result = thread.get()

        :param async bool
        :param str parent: The project and cloud region where this device registry must be created. For example, `projects/example-project/locations/us-central1`. (required)
        :param str xgafv: V1 error format.
        :param str access_token: OAuth access token.
        :param str alt: Data format for response.
        :param str bearer_token: OAuth bearer token.
        :param str param_callback: JSONP
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pp: Pretty-print response.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :param str upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :param str upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :param DeviceRegistry device_registry:
        :return: DeviceRegistry
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.cloudiot_projects_locations_registries_create_with_http_info(parent, **kwargs)  # noqa: E501
        else:
            (data) = self.cloudiot_projects_locations_registries_create_with_http_info(parent, **kwargs)  # noqa: E501
            return data

    def cloudiot_projects_locations_registries_create_with_http_info(self, parent, **kwargs):  # noqa: E501
        """cloudiot_projects_locations_registries_create  # noqa: E501

        Creates a device registry that contains devices.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cloudiot_projects_locations_registries_create_with_http_info(parent, async=True)
        >>> result = thread.get()

        :param async bool
        :param str parent: The project and cloud region where this device registry must be created. For example, `projects/example-project/locations/us-central1`. (required)
        :param str xgafv: V1 error format.
        :param str access_token: OAuth access token.
        :param str alt: Data format for response.
        :param str bearer_token: OAuth bearer token.
        :param str param_callback: JSONP
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pp: Pretty-print response.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :param str upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :param str upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :param DeviceRegistry device_registry:
        :return: DeviceRegistry
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent', 'xgafv', 'access_token', 'alt', 'bearer_token', 'param_callback', 'fields', 'key', 'oauth_token', 'pp', 'pretty_print', 'quota_user', 'upload_type', 'upload_protocol', 'device_registry']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cloudiot_projects_locations_registries_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent' is set
        if ('parent' not in local_var_params or
                local_var_params['parent'] is None):
            raise ValueError("Missing the required parameter `parent` when calling `cloudiot_projects_locations_registries_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent' in local_var_params:
            path_params['parent'] = local_var_params['parent']  # noqa: E501

        query_params = []
        if 'xgafv' in local_var_params:
            query_params.append(('$.xgafv', local_var_params['xgafv']))  # noqa: E501
        if 'access_token' in local_var_params:
            query_params.append(('access_token', local_var_params['access_token']))  # noqa: E501
        if 'alt' in local_var_params:
            query_params.append(('alt', local_var_params['alt']))  # noqa: E501
        if 'bearer_token' in local_var_params:
            query_params.append(('bearer_token', local_var_params['bearer_token']))  # noqa: E501
        if 'param_callback' in local_var_params:
            query_params.append(('callback', local_var_params['param_callback']))  # noqa: E501
        if 'fields' in local_var_params:
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'key' in local_var_params:
            query_params.append(('key', local_var_params['key']))  # noqa: E501
        if 'oauth_token' in local_var_params:
            query_params.append(('oauth_token', local_var_params['oauth_token']))  # noqa: E501
        if 'pp' in local_var_params:
            query_params.append(('pp', local_var_params['pp']))  # noqa: E501
        if 'pretty_print' in local_var_params:
            query_params.append(('prettyPrint', local_var_params['pretty_print']))  # noqa: E501
        if 'quota_user' in local_var_params:
            query_params.append(('quotaUser', local_var_params['quota_user']))  # noqa: E501
        if 'upload_type' in local_var_params:
            query_params.append(('uploadType', local_var_params['upload_type']))  # noqa: E501
        if 'upload_protocol' in local_var_params:
            query_params.append(('upload_protocol', local_var_params['upload_protocol']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'device_registry' in local_var_params:
            body_params = local_var_params['device_registry']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v1/{parent}/registries', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceRegistry',  # noqa: E501
            auth_settings=auth_settings,
            async=local_var_params.get('async'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cloudiot_projects_locations_registries_devices_config_versions_list(self, name, **kwargs):  # noqa: E501
        """cloudiot_projects_locations_registries_devices_config_versions_list  # noqa: E501

        Lists the last few versions of the device configuration in descending order (i.e.: newest first).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cloudiot_projects_locations_registries_devices_config_versions_list(name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: The name of the device. For example, `projects/p0/locations/us-central1/registries/registry0/devices/device0` or `projects/p0/locations/us-central1/registries/registry0/devices/{num_id}`. (required)
        :param str xgafv: V1 error format.
        :param str access_token: OAuth access token.
        :param str alt: Data format for response.
        :param str bearer_token: OAuth bearer token.
        :param str param_callback: JSONP
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pp: Pretty-print response.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :param str upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :param str upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :param int num_versions: The number of versions to list. Versions are listed in decreasing order of the version number. The maximum number of versions retained is 10. If this value is zero, it will return all the versions available.
        :return: ListDeviceConfigVersionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.cloudiot_projects_locations_registries_devices_config_versions_list_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.cloudiot_projects_locations_registries_devices_config_versions_list_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def cloudiot_projects_locations_registries_devices_config_versions_list_with_http_info(self, name, **kwargs):  # noqa: E501
        """cloudiot_projects_locations_registries_devices_config_versions_list  # noqa: E501

        Lists the last few versions of the device configuration in descending order (i.e.: newest first).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cloudiot_projects_locations_registries_devices_config_versions_list_with_http_info(name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: The name of the device. For example, `projects/p0/locations/us-central1/registries/registry0/devices/device0` or `projects/p0/locations/us-central1/registries/registry0/devices/{num_id}`. (required)
        :param str xgafv: V1 error format.
        :param str access_token: OAuth access token.
        :param str alt: Data format for response.
        :param str bearer_token: OAuth bearer token.
        :param str param_callback: JSONP
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pp: Pretty-print response.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :param str upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :param str upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :param int num_versions: The number of versions to list. Versions are listed in decreasing order of the version number. The maximum number of versions retained is 10. If this value is zero, it will return all the versions available.
        :return: ListDeviceConfigVersionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['name', 'xgafv', 'access_token', 'alt', 'bearer_token', 'param_callback', 'fields', 'key', 'oauth_token', 'pp', 'pretty_print', 'quota_user', 'upload_type', 'upload_protocol', 'num_versions']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cloudiot_projects_locations_registries_devices_config_versions_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in local_var_params or
                local_var_params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cloudiot_projects_locations_registries_devices_config_versions_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in local_var_params:
            path_params['name'] = local_var_params['name']  # noqa: E501

        query_params = []
        if 'xgafv' in local_var_params:
            query_params.append(('$.xgafv', local_var_params['xgafv']))  # noqa: E501
        if 'access_token' in local_var_params:
            query_params.append(('access_token', local_var_params['access_token']))  # noqa: E501
        if 'alt' in local_var_params:
            query_params.append(('alt', local_var_params['alt']))  # noqa: E501
        if 'bearer_token' in local_var_params:
            query_params.append(('bearer_token', local_var_params['bearer_token']))  # noqa: E501
        if 'param_callback' in local_var_params:
            query_params.append(('callback', local_var_params['param_callback']))  # noqa: E501
        if 'fields' in local_var_params:
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'key' in local_var_params:
            query_params.append(('key', local_var_params['key']))  # noqa: E501
        if 'oauth_token' in local_var_params:
            query_params.append(('oauth_token', local_var_params['oauth_token']))  # noqa: E501
        if 'pp' in local_var_params:
            query_params.append(('pp', local_var_params['pp']))  # noqa: E501
        if 'pretty_print' in local_var_params:
            query_params.append(('prettyPrint', local_var_params['pretty_print']))  # noqa: E501
        if 'quota_user' in local_var_params:
            query_params.append(('quotaUser', local_var_params['quota_user']))  # noqa: E501
        if 'upload_type' in local_var_params:
            query_params.append(('uploadType', local_var_params['upload_type']))  # noqa: E501
        if 'upload_protocol' in local_var_params:
            query_params.append(('upload_protocol', local_var_params['upload_protocol']))  # noqa: E501
        if 'num_versions' in local_var_params:
            query_params.append(('numVersions', local_var_params['num_versions']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v1/{name}/configVersions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListDeviceConfigVersionsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=local_var_params.get('async'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cloudiot_projects_locations_registries_devices_create(self, parent, **kwargs):  # noqa: E501
        """cloudiot_projects_locations_registries_devices_create  # noqa: E501

        Creates a device in a device registry.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cloudiot_projects_locations_registries_devices_create(parent, async=True)
        >>> result = thread.get()

        :param async bool
        :param str parent: The name of the device registry where this device should be created. For example, `projects/example-project/locations/us-central1/registries/my-registry`. (required)
        :param str xgafv: V1 error format.
        :param str access_token: OAuth access token.
        :param str alt: Data format for response.
        :param str bearer_token: OAuth bearer token.
        :param str param_callback: JSONP
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pp: Pretty-print response.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :param str upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :param str upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :param Device device:
        :return: Device
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.cloudiot_projects_locations_registries_devices_create_with_http_info(parent, **kwargs)  # noqa: E501
        else:
            (data) = self.cloudiot_projects_locations_registries_devices_create_with_http_info(parent, **kwargs)  # noqa: E501
            return data

    def cloudiot_projects_locations_registries_devices_create_with_http_info(self, parent, **kwargs):  # noqa: E501
        """cloudiot_projects_locations_registries_devices_create  # noqa: E501

        Creates a device in a device registry.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cloudiot_projects_locations_registries_devices_create_with_http_info(parent, async=True)
        >>> result = thread.get()

        :param async bool
        :param str parent: The name of the device registry where this device should be created. For example, `projects/example-project/locations/us-central1/registries/my-registry`. (required)
        :param str xgafv: V1 error format.
        :param str access_token: OAuth access token.
        :param str alt: Data format for response.
        :param str bearer_token: OAuth bearer token.
        :param str param_callback: JSONP
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pp: Pretty-print response.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :param str upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :param str upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :param Device device:
        :return: Device
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent', 'xgafv', 'access_token', 'alt', 'bearer_token', 'param_callback', 'fields', 'key', 'oauth_token', 'pp', 'pretty_print', 'quota_user', 'upload_type', 'upload_protocol', 'device']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cloudiot_projects_locations_registries_devices_create" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent' is set
        if ('parent' not in local_var_params or
                local_var_params['parent'] is None):
            raise ValueError("Missing the required parameter `parent` when calling `cloudiot_projects_locations_registries_devices_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent' in local_var_params:
            path_params['parent'] = local_var_params['parent']  # noqa: E501

        query_params = []
        if 'xgafv' in local_var_params:
            query_params.append(('$.xgafv', local_var_params['xgafv']))  # noqa: E501
        if 'access_token' in local_var_params:
            query_params.append(('access_token', local_var_params['access_token']))  # noqa: E501
        if 'alt' in local_var_params:
            query_params.append(('alt', local_var_params['alt']))  # noqa: E501
        if 'bearer_token' in local_var_params:
            query_params.append(('bearer_token', local_var_params['bearer_token']))  # noqa: E501
        if 'param_callback' in local_var_params:
            query_params.append(('callback', local_var_params['param_callback']))  # noqa: E501
        if 'fields' in local_var_params:
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'key' in local_var_params:
            query_params.append(('key', local_var_params['key']))  # noqa: E501
        if 'oauth_token' in local_var_params:
            query_params.append(('oauth_token', local_var_params['oauth_token']))  # noqa: E501
        if 'pp' in local_var_params:
            query_params.append(('pp', local_var_params['pp']))  # noqa: E501
        if 'pretty_print' in local_var_params:
            query_params.append(('prettyPrint', local_var_params['pretty_print']))  # noqa: E501
        if 'quota_user' in local_var_params:
            query_params.append(('quotaUser', local_var_params['quota_user']))  # noqa: E501
        if 'upload_type' in local_var_params:
            query_params.append(('uploadType', local_var_params['upload_type']))  # noqa: E501
        if 'upload_protocol' in local_var_params:
            query_params.append(('upload_protocol', local_var_params['upload_protocol']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'device' in local_var_params:
            body_params = local_var_params['device']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v1/{parent}/devices', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Device',  # noqa: E501
            auth_settings=auth_settings,
            async=local_var_params.get('async'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cloudiot_projects_locations_registries_devices_delete(self, name, **kwargs):  # noqa: E501
        """cloudiot_projects_locations_registries_devices_delete  # noqa: E501

        Deletes a device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cloudiot_projects_locations_registries_devices_delete(name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: The name of the device. For example, `projects/p0/locations/us-central1/registries/registry0/devices/device0` or `projects/p0/locations/us-central1/registries/registry0/devices/{num_id}`. (required)
        :param str xgafv: V1 error format.
        :param str access_token: OAuth access token.
        :param str alt: Data format for response.
        :param str bearer_token: OAuth bearer token.
        :param str param_callback: JSONP
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pp: Pretty-print response.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :param str upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :param str upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.cloudiot_projects_locations_registries_devices_delete_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.cloudiot_projects_locations_registries_devices_delete_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def cloudiot_projects_locations_registries_devices_delete_with_http_info(self, name, **kwargs):  # noqa: E501
        """cloudiot_projects_locations_registries_devices_delete  # noqa: E501

        Deletes a device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cloudiot_projects_locations_registries_devices_delete_with_http_info(name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: The name of the device. For example, `projects/p0/locations/us-central1/registries/registry0/devices/device0` or `projects/p0/locations/us-central1/registries/registry0/devices/{num_id}`. (required)
        :param str xgafv: V1 error format.
        :param str access_token: OAuth access token.
        :param str alt: Data format for response.
        :param str bearer_token: OAuth bearer token.
        :param str param_callback: JSONP
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pp: Pretty-print response.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :param str upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :param str upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :return: Empty
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['name', 'xgafv', 'access_token', 'alt', 'bearer_token', 'param_callback', 'fields', 'key', 'oauth_token', 'pp', 'pretty_print', 'quota_user', 'upload_type', 'upload_protocol']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cloudiot_projects_locations_registries_devices_delete" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in local_var_params or
                local_var_params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cloudiot_projects_locations_registries_devices_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in local_var_params:
            path_params['name'] = local_var_params['name']  # noqa: E501

        query_params = []
        if 'xgafv' in local_var_params:
            query_params.append(('$.xgafv', local_var_params['xgafv']))  # noqa: E501
        if 'access_token' in local_var_params:
            query_params.append(('access_token', local_var_params['access_token']))  # noqa: E501
        if 'alt' in local_var_params:
            query_params.append(('alt', local_var_params['alt']))  # noqa: E501
        if 'bearer_token' in local_var_params:
            query_params.append(('bearer_token', local_var_params['bearer_token']))  # noqa: E501
        if 'param_callback' in local_var_params:
            query_params.append(('callback', local_var_params['param_callback']))  # noqa: E501
        if 'fields' in local_var_params:
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'key' in local_var_params:
            query_params.append(('key', local_var_params['key']))  # noqa: E501
        if 'oauth_token' in local_var_params:
            query_params.append(('oauth_token', local_var_params['oauth_token']))  # noqa: E501
        if 'pp' in local_var_params:
            query_params.append(('pp', local_var_params['pp']))  # noqa: E501
        if 'pretty_print' in local_var_params:
            query_params.append(('prettyPrint', local_var_params['pretty_print']))  # noqa: E501
        if 'quota_user' in local_var_params:
            query_params.append(('quotaUser', local_var_params['quota_user']))  # noqa: E501
        if 'upload_type' in local_var_params:
            query_params.append(('uploadType', local_var_params['upload_type']))  # noqa: E501
        if 'upload_protocol' in local_var_params:
            query_params.append(('upload_protocol', local_var_params['upload_protocol']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v1/{name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Empty',  # noqa: E501
            auth_settings=auth_settings,
            async=local_var_params.get('async'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cloudiot_projects_locations_registries_devices_get(self, name, **kwargs):  # noqa: E501
        """cloudiot_projects_locations_registries_devices_get  # noqa: E501

        Gets details about a device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cloudiot_projects_locations_registries_devices_get(name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: The name of the device. For example, `projects/p0/locations/us-central1/registries/registry0/devices/device0` or `projects/p0/locations/us-central1/registries/registry0/devices/{num_id}`. (required)
        :param str xgafv: V1 error format.
        :param str access_token: OAuth access token.
        :param str alt: Data format for response.
        :param str bearer_token: OAuth bearer token.
        :param str param_callback: JSONP
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pp: Pretty-print response.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :param str upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :param str upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :param str field_mask: The fields of the `Device` resource to be returned in the response. If the field mask is unset or empty, all fields are returned.
        :return: Device
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.cloudiot_projects_locations_registries_devices_get_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.cloudiot_projects_locations_registries_devices_get_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def cloudiot_projects_locations_registries_devices_get_with_http_info(self, name, **kwargs):  # noqa: E501
        """cloudiot_projects_locations_registries_devices_get  # noqa: E501

        Gets details about a device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cloudiot_projects_locations_registries_devices_get_with_http_info(name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: The name of the device. For example, `projects/p0/locations/us-central1/registries/registry0/devices/device0` or `projects/p0/locations/us-central1/registries/registry0/devices/{num_id}`. (required)
        :param str xgafv: V1 error format.
        :param str access_token: OAuth access token.
        :param str alt: Data format for response.
        :param str bearer_token: OAuth bearer token.
        :param str param_callback: JSONP
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pp: Pretty-print response.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :param str upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :param str upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :param str field_mask: The fields of the `Device` resource to be returned in the response. If the field mask is unset or empty, all fields are returned.
        :return: Device
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['name', 'xgafv', 'access_token', 'alt', 'bearer_token', 'param_callback', 'fields', 'key', 'oauth_token', 'pp', 'pretty_print', 'quota_user', 'upload_type', 'upload_protocol', 'field_mask']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cloudiot_projects_locations_registries_devices_get" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in local_var_params or
                local_var_params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cloudiot_projects_locations_registries_devices_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in local_var_params:
            path_params['name'] = local_var_params['name']  # noqa: E501

        query_params = []
        if 'xgafv' in local_var_params:
            query_params.append(('$.xgafv', local_var_params['xgafv']))  # noqa: E501
        if 'access_token' in local_var_params:
            query_params.append(('access_token', local_var_params['access_token']))  # noqa: E501
        if 'alt' in local_var_params:
            query_params.append(('alt', local_var_params['alt']))  # noqa: E501
        if 'bearer_token' in local_var_params:
            query_params.append(('bearer_token', local_var_params['bearer_token']))  # noqa: E501
        if 'param_callback' in local_var_params:
            query_params.append(('callback', local_var_params['param_callback']))  # noqa: E501
        if 'fields' in local_var_params:
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'key' in local_var_params:
            query_params.append(('key', local_var_params['key']))  # noqa: E501
        if 'oauth_token' in local_var_params:
            query_params.append(('oauth_token', local_var_params['oauth_token']))  # noqa: E501
        if 'pp' in local_var_params:
            query_params.append(('pp', local_var_params['pp']))  # noqa: E501
        if 'pretty_print' in local_var_params:
            query_params.append(('prettyPrint', local_var_params['pretty_print']))  # noqa: E501
        if 'quota_user' in local_var_params:
            query_params.append(('quotaUser', local_var_params['quota_user']))  # noqa: E501
        if 'upload_type' in local_var_params:
            query_params.append(('uploadType', local_var_params['upload_type']))  # noqa: E501
        if 'upload_protocol' in local_var_params:
            query_params.append(('upload_protocol', local_var_params['upload_protocol']))  # noqa: E501
        if 'field_mask' in local_var_params:
            query_params.append(('fieldMask', local_var_params['field_mask']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v1/{name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Device',  # noqa: E501
            auth_settings=auth_settings,
            async=local_var_params.get('async'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cloudiot_projects_locations_registries_devices_list(self, parent, **kwargs):  # noqa: E501
        """cloudiot_projects_locations_registries_devices_list  # noqa: E501

        List devices in a device registry.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cloudiot_projects_locations_registries_devices_list(parent, async=True)
        >>> result = thread.get()

        :param async bool
        :param str parent: The device registry path. Required. For example, `projects/my-project/locations/us-central1/registries/my-registry`. (required)
        :param str xgafv: V1 error format.
        :param str access_token: OAuth access token.
        :param str alt: Data format for response.
        :param str bearer_token: OAuth bearer token.
        :param str param_callback: JSONP
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pp: Pretty-print response.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :param str upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :param str upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :param list[str] device_ids: A list of device string identifiers. If empty, it will ignore this field. For example, `['device0', 'device12']`. This field cannot hold more than 10,000 entries.
        :param list[str] device_num_ids: A list of device numerical ids. If empty, it will ignore this field. This field cannot hold more than 10,000 entries.
        :param str field_mask: The fields of the `Device` resource to be returned in the response. The fields `id`, and `num_id` are always returned by default, along with any other fields specified.
        :param int page_size: The maximum number of devices to return in the response. If this value is zero, the service will select a default size. A call may return fewer objects than requested, but if there is a non-empty `page_token`, it indicates that more entries are available.
        :param str page_token: The value returned by the last `ListDevicesResponse`; indicates that this is a continuation of a prior `ListDevices` call, and that the system should return the next page of data.
        :return: ListDevicesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.cloudiot_projects_locations_registries_devices_list_with_http_info(parent, **kwargs)  # noqa: E501
        else:
            (data) = self.cloudiot_projects_locations_registries_devices_list_with_http_info(parent, **kwargs)  # noqa: E501
            return data

    def cloudiot_projects_locations_registries_devices_list_with_http_info(self, parent, **kwargs):  # noqa: E501
        """cloudiot_projects_locations_registries_devices_list  # noqa: E501

        List devices in a device registry.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cloudiot_projects_locations_registries_devices_list_with_http_info(parent, async=True)
        >>> result = thread.get()

        :param async bool
        :param str parent: The device registry path. Required. For example, `projects/my-project/locations/us-central1/registries/my-registry`. (required)
        :param str xgafv: V1 error format.
        :param str access_token: OAuth access token.
        :param str alt: Data format for response.
        :param str bearer_token: OAuth bearer token.
        :param str param_callback: JSONP
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pp: Pretty-print response.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :param str upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :param str upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :param list[str] device_ids: A list of device string identifiers. If empty, it will ignore this field. For example, `['device0', 'device12']`. This field cannot hold more than 10,000 entries.
        :param list[str] device_num_ids: A list of device numerical ids. If empty, it will ignore this field. This field cannot hold more than 10,000 entries.
        :param str field_mask: The fields of the `Device` resource to be returned in the response. The fields `id`, and `num_id` are always returned by default, along with any other fields specified.
        :param int page_size: The maximum number of devices to return in the response. If this value is zero, the service will select a default size. A call may return fewer objects than requested, but if there is a non-empty `page_token`, it indicates that more entries are available.
        :param str page_token: The value returned by the last `ListDevicesResponse`; indicates that this is a continuation of a prior `ListDevices` call, and that the system should return the next page of data.
        :return: ListDevicesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent', 'xgafv', 'access_token', 'alt', 'bearer_token', 'param_callback', 'fields', 'key', 'oauth_token', 'pp', 'pretty_print', 'quota_user', 'upload_type', 'upload_protocol', 'device_ids', 'device_num_ids', 'field_mask', 'page_size', 'page_token']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cloudiot_projects_locations_registries_devices_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent' is set
        if ('parent' not in local_var_params or
                local_var_params['parent'] is None):
            raise ValueError("Missing the required parameter `parent` when calling `cloudiot_projects_locations_registries_devices_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent' in local_var_params:
            path_params['parent'] = local_var_params['parent']  # noqa: E501

        query_params = []
        if 'xgafv' in local_var_params:
            query_params.append(('$.xgafv', local_var_params['xgafv']))  # noqa: E501
        if 'access_token' in local_var_params:
            query_params.append(('access_token', local_var_params['access_token']))  # noqa: E501
        if 'alt' in local_var_params:
            query_params.append(('alt', local_var_params['alt']))  # noqa: E501
        if 'bearer_token' in local_var_params:
            query_params.append(('bearer_token', local_var_params['bearer_token']))  # noqa: E501
        if 'param_callback' in local_var_params:
            query_params.append(('callback', local_var_params['param_callback']))  # noqa: E501
        if 'fields' in local_var_params:
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'key' in local_var_params:
            query_params.append(('key', local_var_params['key']))  # noqa: E501
        if 'oauth_token' in local_var_params:
            query_params.append(('oauth_token', local_var_params['oauth_token']))  # noqa: E501
        if 'pp' in local_var_params:
            query_params.append(('pp', local_var_params['pp']))  # noqa: E501
        if 'pretty_print' in local_var_params:
            query_params.append(('prettyPrint', local_var_params['pretty_print']))  # noqa: E501
        if 'quota_user' in local_var_params:
            query_params.append(('quotaUser', local_var_params['quota_user']))  # noqa: E501
        if 'upload_type' in local_var_params:
            query_params.append(('uploadType', local_var_params['upload_type']))  # noqa: E501
        if 'upload_protocol' in local_var_params:
            query_params.append(('upload_protocol', local_var_params['upload_protocol']))  # noqa: E501
        if 'device_ids' in local_var_params:
            query_params.append(('deviceIds', local_var_params['device_ids']))  # noqa: E501
            collection_formats['deviceIds'] = 'multi'  # noqa: E501
        if 'device_num_ids' in local_var_params:
            query_params.append(('deviceNumIds', local_var_params['device_num_ids']))  # noqa: E501
            collection_formats['deviceNumIds'] = 'multi'  # noqa: E501
        if 'field_mask' in local_var_params:
            query_params.append(('fieldMask', local_var_params['field_mask']))  # noqa: E501
        if 'page_size' in local_var_params:
            query_params.append(('pageSize', local_var_params['page_size']))  # noqa: E501
        if 'page_token' in local_var_params:
            query_params.append(('pageToken', local_var_params['page_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v1/{parent}/devices', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListDevicesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=local_var_params.get('async'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cloudiot_projects_locations_registries_devices_modify_cloud_to_device_config(self, name, **kwargs):  # noqa: E501
        """cloudiot_projects_locations_registries_devices_modify_cloud_to_device_config  # noqa: E501

        Modifies the configuration for the device, which is eventually sent from the Cloud IoT Core servers. Returns the modified configuration version and its metadata.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cloudiot_projects_locations_registries_devices_modify_cloud_to_device_config(name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: The name of the device. For example, `projects/p0/locations/us-central1/registries/registry0/devices/device0` or `projects/p0/locations/us-central1/registries/registry0/devices/{num_id}`. (required)
        :param str xgafv: V1 error format.
        :param str access_token: OAuth access token.
        :param str alt: Data format for response.
        :param str bearer_token: OAuth bearer token.
        :param str param_callback: JSONP
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pp: Pretty-print response.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :param str upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :param str upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :param ModifyCloudToDeviceConfigRequest modify_cloud_to_device_config_request:
        :return: DeviceConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.cloudiot_projects_locations_registries_devices_modify_cloud_to_device_config_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.cloudiot_projects_locations_registries_devices_modify_cloud_to_device_config_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def cloudiot_projects_locations_registries_devices_modify_cloud_to_device_config_with_http_info(self, name, **kwargs):  # noqa: E501
        """cloudiot_projects_locations_registries_devices_modify_cloud_to_device_config  # noqa: E501

        Modifies the configuration for the device, which is eventually sent from the Cloud IoT Core servers. Returns the modified configuration version and its metadata.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cloudiot_projects_locations_registries_devices_modify_cloud_to_device_config_with_http_info(name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: The name of the device. For example, `projects/p0/locations/us-central1/registries/registry0/devices/device0` or `projects/p0/locations/us-central1/registries/registry0/devices/{num_id}`. (required)
        :param str xgafv: V1 error format.
        :param str access_token: OAuth access token.
        :param str alt: Data format for response.
        :param str bearer_token: OAuth bearer token.
        :param str param_callback: JSONP
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pp: Pretty-print response.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :param str upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :param str upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :param ModifyCloudToDeviceConfigRequest modify_cloud_to_device_config_request:
        :return: DeviceConfig
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['name', 'xgafv', 'access_token', 'alt', 'bearer_token', 'param_callback', 'fields', 'key', 'oauth_token', 'pp', 'pretty_print', 'quota_user', 'upload_type', 'upload_protocol', 'modify_cloud_to_device_config_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cloudiot_projects_locations_registries_devices_modify_cloud_to_device_config" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in local_var_params or
                local_var_params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cloudiot_projects_locations_registries_devices_modify_cloud_to_device_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in local_var_params:
            path_params['name'] = local_var_params['name']  # noqa: E501

        query_params = []
        if 'xgafv' in local_var_params:
            query_params.append(('$.xgafv', local_var_params['xgafv']))  # noqa: E501
        if 'access_token' in local_var_params:
            query_params.append(('access_token', local_var_params['access_token']))  # noqa: E501
        if 'alt' in local_var_params:
            query_params.append(('alt', local_var_params['alt']))  # noqa: E501
        if 'bearer_token' in local_var_params:
            query_params.append(('bearer_token', local_var_params['bearer_token']))  # noqa: E501
        if 'param_callback' in local_var_params:
            query_params.append(('callback', local_var_params['param_callback']))  # noqa: E501
        if 'fields' in local_var_params:
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'key' in local_var_params:
            query_params.append(('key', local_var_params['key']))  # noqa: E501
        if 'oauth_token' in local_var_params:
            query_params.append(('oauth_token', local_var_params['oauth_token']))  # noqa: E501
        if 'pp' in local_var_params:
            query_params.append(('pp', local_var_params['pp']))  # noqa: E501
        if 'pretty_print' in local_var_params:
            query_params.append(('prettyPrint', local_var_params['pretty_print']))  # noqa: E501
        if 'quota_user' in local_var_params:
            query_params.append(('quotaUser', local_var_params['quota_user']))  # noqa: E501
        if 'upload_type' in local_var_params:
            query_params.append(('uploadType', local_var_params['upload_type']))  # noqa: E501
        if 'upload_protocol' in local_var_params:
            query_params.append(('upload_protocol', local_var_params['upload_protocol']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'modify_cloud_to_device_config_request' in local_var_params:
            body_params = local_var_params['modify_cloud_to_device_config_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v1/{name}:modifyCloudToDeviceConfig', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceConfig',  # noqa: E501
            auth_settings=auth_settings,
            async=local_var_params.get('async'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cloudiot_projects_locations_registries_devices_patch(self, name, **kwargs):  # noqa: E501
        """cloudiot_projects_locations_registries_devices_patch  # noqa: E501

        Updates a device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cloudiot_projects_locations_registries_devices_patch(name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: The resource path name. For example, `projects/p1/locations/us-central1/registries/registry0/devices/dev0` or `projects/p1/locations/us-central1/registries/registry0/devices/{num_id}`. When `name` is populated as a response from the service, it always ends in the device numeric ID. (required)
        :param str xgafv: V1 error format.
        :param str access_token: OAuth access token.
        :param str alt: Data format for response.
        :param str bearer_token: OAuth bearer token.
        :param str param_callback: JSONP
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pp: Pretty-print response.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :param str upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :param str upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :param str update_mask: Only updates the `device` fields indicated by this mask. The field mask must not be empty, and it must not contain fields that are immutable or only set by the server. Mutable top-level fields: `credentials`, `blocked`, and `metadata`
        :param Device device:
        :return: Device
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.cloudiot_projects_locations_registries_devices_patch_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.cloudiot_projects_locations_registries_devices_patch_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def cloudiot_projects_locations_registries_devices_patch_with_http_info(self, name, **kwargs):  # noqa: E501
        """cloudiot_projects_locations_registries_devices_patch  # noqa: E501

        Updates a device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cloudiot_projects_locations_registries_devices_patch_with_http_info(name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: The resource path name. For example, `projects/p1/locations/us-central1/registries/registry0/devices/dev0` or `projects/p1/locations/us-central1/registries/registry0/devices/{num_id}`. When `name` is populated as a response from the service, it always ends in the device numeric ID. (required)
        :param str xgafv: V1 error format.
        :param str access_token: OAuth access token.
        :param str alt: Data format for response.
        :param str bearer_token: OAuth bearer token.
        :param str param_callback: JSONP
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pp: Pretty-print response.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :param str upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :param str upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :param str update_mask: Only updates the `device` fields indicated by this mask. The field mask must not be empty, and it must not contain fields that are immutable or only set by the server. Mutable top-level fields: `credentials`, `blocked`, and `metadata`
        :param Device device:
        :return: Device
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['name', 'xgafv', 'access_token', 'alt', 'bearer_token', 'param_callback', 'fields', 'key', 'oauth_token', 'pp', 'pretty_print', 'quota_user', 'upload_type', 'upload_protocol', 'update_mask', 'device']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cloudiot_projects_locations_registries_devices_patch" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in local_var_params or
                local_var_params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cloudiot_projects_locations_registries_devices_patch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in local_var_params:
            path_params['name'] = local_var_params['name']  # noqa: E501

        query_params = []
        if 'xgafv' in local_var_params:
            query_params.append(('$.xgafv', local_var_params['xgafv']))  # noqa: E501
        if 'access_token' in local_var_params:
            query_params.append(('access_token', local_var_params['access_token']))  # noqa: E501
        if 'alt' in local_var_params:
            query_params.append(('alt', local_var_params['alt']))  # noqa: E501
        if 'bearer_token' in local_var_params:
            query_params.append(('bearer_token', local_var_params['bearer_token']))  # noqa: E501
        if 'param_callback' in local_var_params:
            query_params.append(('callback', local_var_params['param_callback']))  # noqa: E501
        if 'fields' in local_var_params:
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'key' in local_var_params:
            query_params.append(('key', local_var_params['key']))  # noqa: E501
        if 'oauth_token' in local_var_params:
            query_params.append(('oauth_token', local_var_params['oauth_token']))  # noqa: E501
        if 'pp' in local_var_params:
            query_params.append(('pp', local_var_params['pp']))  # noqa: E501
        if 'pretty_print' in local_var_params:
            query_params.append(('prettyPrint', local_var_params['pretty_print']))  # noqa: E501
        if 'quota_user' in local_var_params:
            query_params.append(('quotaUser', local_var_params['quota_user']))  # noqa: E501
        if 'upload_type' in local_var_params:
            query_params.append(('uploadType', local_var_params['upload_type']))  # noqa: E501
        if 'upload_protocol' in local_var_params:
            query_params.append(('upload_protocol', local_var_params['upload_protocol']))  # noqa: E501
        if 'update_mask' in local_var_params:
            query_params.append(('updateMask', local_var_params['update_mask']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'device' in local_var_params:
            body_params = local_var_params['device']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v1/{name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Device',  # noqa: E501
            auth_settings=auth_settings,
            async=local_var_params.get('async'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cloudiot_projects_locations_registries_devices_states_list(self, name, **kwargs):  # noqa: E501
        """cloudiot_projects_locations_registries_devices_states_list  # noqa: E501

        Lists the last few versions of the device state in descending order (i.e.: newest first).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cloudiot_projects_locations_registries_devices_states_list(name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: The name of the device. For example, `projects/p0/locations/us-central1/registries/registry0/devices/device0` or `projects/p0/locations/us-central1/registries/registry0/devices/{num_id}`. (required)
        :param str xgafv: V1 error format.
        :param str access_token: OAuth access token.
        :param str alt: Data format for response.
        :param str bearer_token: OAuth bearer token.
        :param str param_callback: JSONP
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pp: Pretty-print response.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :param str upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :param str upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :param int num_states: The number of states to list. States are listed in descending order of update time. The maximum number of states retained is 10. If this value is zero, it will return all the states available.
        :return: ListDeviceStatesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.cloudiot_projects_locations_registries_devices_states_list_with_http_info(name, **kwargs)  # noqa: E501
        else:
            (data) = self.cloudiot_projects_locations_registries_devices_states_list_with_http_info(name, **kwargs)  # noqa: E501
            return data

    def cloudiot_projects_locations_registries_devices_states_list_with_http_info(self, name, **kwargs):  # noqa: E501
        """cloudiot_projects_locations_registries_devices_states_list  # noqa: E501

        Lists the last few versions of the device state in descending order (i.e.: newest first).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cloudiot_projects_locations_registries_devices_states_list_with_http_info(name, async=True)
        >>> result = thread.get()

        :param async bool
        :param str name: The name of the device. For example, `projects/p0/locations/us-central1/registries/registry0/devices/device0` or `projects/p0/locations/us-central1/registries/registry0/devices/{num_id}`. (required)
        :param str xgafv: V1 error format.
        :param str access_token: OAuth access token.
        :param str alt: Data format for response.
        :param str bearer_token: OAuth bearer token.
        :param str param_callback: JSONP
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pp: Pretty-print response.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :param str upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :param str upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :param int num_states: The number of states to list. States are listed in descending order of update time. The maximum number of states retained is 10. If this value is zero, it will return all the states available.
        :return: ListDeviceStatesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['name', 'xgafv', 'access_token', 'alt', 'bearer_token', 'param_callback', 'fields', 'key', 'oauth_token', 'pp', 'pretty_print', 'quota_user', 'upload_type', 'upload_protocol', 'num_states']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cloudiot_projects_locations_registries_devices_states_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in local_var_params or
                local_var_params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `cloudiot_projects_locations_registries_devices_states_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'name' in local_var_params:
            path_params['name'] = local_var_params['name']  # noqa: E501

        query_params = []
        if 'xgafv' in local_var_params:
            query_params.append(('$.xgafv', local_var_params['xgafv']))  # noqa: E501
        if 'access_token' in local_var_params:
            query_params.append(('access_token', local_var_params['access_token']))  # noqa: E501
        if 'alt' in local_var_params:
            query_params.append(('alt', local_var_params['alt']))  # noqa: E501
        if 'bearer_token' in local_var_params:
            query_params.append(('bearer_token', local_var_params['bearer_token']))  # noqa: E501
        if 'param_callback' in local_var_params:
            query_params.append(('callback', local_var_params['param_callback']))  # noqa: E501
        if 'fields' in local_var_params:
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'key' in local_var_params:
            query_params.append(('key', local_var_params['key']))  # noqa: E501
        if 'oauth_token' in local_var_params:
            query_params.append(('oauth_token', local_var_params['oauth_token']))  # noqa: E501
        if 'pp' in local_var_params:
            query_params.append(('pp', local_var_params['pp']))  # noqa: E501
        if 'pretty_print' in local_var_params:
            query_params.append(('prettyPrint', local_var_params['pretty_print']))  # noqa: E501
        if 'quota_user' in local_var_params:
            query_params.append(('quotaUser', local_var_params['quota_user']))  # noqa: E501
        if 'upload_type' in local_var_params:
            query_params.append(('uploadType', local_var_params['upload_type']))  # noqa: E501
        if 'upload_protocol' in local_var_params:
            query_params.append(('upload_protocol', local_var_params['upload_protocol']))  # noqa: E501
        if 'num_states' in local_var_params:
            query_params.append(('numStates', local_var_params['num_states']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v1/{name}/states', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListDeviceStatesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=local_var_params.get('async'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cloudiot_projects_locations_registries_groups_get_iam_policy(self, resource, **kwargs):  # noqa: E501
        """cloudiot_projects_locations_registries_groups_get_iam_policy  # noqa: E501

        Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cloudiot_projects_locations_registries_groups_get_iam_policy(resource, async=True)
        >>> result = thread.get()

        :param async bool
        :param str resource: REQUIRED: The resource for which the policy is being requested. See the operation documentation for the appropriate value for this field. (required)
        :param str xgafv: V1 error format.
        :param str access_token: OAuth access token.
        :param str alt: Data format for response.
        :param str bearer_token: OAuth bearer token.
        :param str param_callback: JSONP
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pp: Pretty-print response.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :param str upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :param str upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :param GetIamPolicyRequest get_iam_policy_request:
        :return: Policy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.cloudiot_projects_locations_registries_groups_get_iam_policy_with_http_info(resource, **kwargs)  # noqa: E501
        else:
            (data) = self.cloudiot_projects_locations_registries_groups_get_iam_policy_with_http_info(resource, **kwargs)  # noqa: E501
            return data

    def cloudiot_projects_locations_registries_groups_get_iam_policy_with_http_info(self, resource, **kwargs):  # noqa: E501
        """cloudiot_projects_locations_registries_groups_get_iam_policy  # noqa: E501

        Gets the access control policy for a resource. Returns an empty policy if the resource exists and does not have a policy set.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cloudiot_projects_locations_registries_groups_get_iam_policy_with_http_info(resource, async=True)
        >>> result = thread.get()

        :param async bool
        :param str resource: REQUIRED: The resource for which the policy is being requested. See the operation documentation for the appropriate value for this field. (required)
        :param str xgafv: V1 error format.
        :param str access_token: OAuth access token.
        :param str alt: Data format for response.
        :param str bearer_token: OAuth bearer token.
        :param str param_callback: JSONP
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pp: Pretty-print response.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :param str upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :param str upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :param GetIamPolicyRequest get_iam_policy_request:
        :return: Policy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['resource', 'xgafv', 'access_token', 'alt', 'bearer_token', 'param_callback', 'fields', 'key', 'oauth_token', 'pp', 'pretty_print', 'quota_user', 'upload_type', 'upload_protocol', 'get_iam_policy_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cloudiot_projects_locations_registries_groups_get_iam_policy" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'resource' is set
        if ('resource' not in local_var_params or
                local_var_params['resource'] is None):
            raise ValueError("Missing the required parameter `resource` when calling `cloudiot_projects_locations_registries_groups_get_iam_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'resource' in local_var_params:
            path_params['resource'] = local_var_params['resource']  # noqa: E501

        query_params = []
        if 'xgafv' in local_var_params:
            query_params.append(('$.xgafv', local_var_params['xgafv']))  # noqa: E501
        if 'access_token' in local_var_params:
            query_params.append(('access_token', local_var_params['access_token']))  # noqa: E501
        if 'alt' in local_var_params:
            query_params.append(('alt', local_var_params['alt']))  # noqa: E501
        if 'bearer_token' in local_var_params:
            query_params.append(('bearer_token', local_var_params['bearer_token']))  # noqa: E501
        if 'param_callback' in local_var_params:
            query_params.append(('callback', local_var_params['param_callback']))  # noqa: E501
        if 'fields' in local_var_params:
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'key' in local_var_params:
            query_params.append(('key', local_var_params['key']))  # noqa: E501
        if 'oauth_token' in local_var_params:
            query_params.append(('oauth_token', local_var_params['oauth_token']))  # noqa: E501
        if 'pp' in local_var_params:
            query_params.append(('pp', local_var_params['pp']))  # noqa: E501
        if 'pretty_print' in local_var_params:
            query_params.append(('prettyPrint', local_var_params['pretty_print']))  # noqa: E501
        if 'quota_user' in local_var_params:
            query_params.append(('quotaUser', local_var_params['quota_user']))  # noqa: E501
        if 'upload_type' in local_var_params:
            query_params.append(('uploadType', local_var_params['upload_type']))  # noqa: E501
        if 'upload_protocol' in local_var_params:
            query_params.append(('upload_protocol', local_var_params['upload_protocol']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'get_iam_policy_request' in local_var_params:
            body_params = local_var_params['get_iam_policy_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v1/{resource}:getIamPolicy', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Policy',  # noqa: E501
            auth_settings=auth_settings,
            async=local_var_params.get('async'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cloudiot_projects_locations_registries_groups_set_iam_policy(self, resource, **kwargs):  # noqa: E501
        """cloudiot_projects_locations_registries_groups_set_iam_policy  # noqa: E501

        Sets the access control policy on the specified resource. Replaces any existing policy.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cloudiot_projects_locations_registries_groups_set_iam_policy(resource, async=True)
        >>> result = thread.get()

        :param async bool
        :param str resource: REQUIRED: The resource for which the policy is being specified. See the operation documentation for the appropriate value for this field. (required)
        :param str xgafv: V1 error format.
        :param str access_token: OAuth access token.
        :param str alt: Data format for response.
        :param str bearer_token: OAuth bearer token.
        :param str param_callback: JSONP
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pp: Pretty-print response.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :param str upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :param str upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :param SetIamPolicyRequest set_iam_policy_request:
        :return: Policy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.cloudiot_projects_locations_registries_groups_set_iam_policy_with_http_info(resource, **kwargs)  # noqa: E501
        else:
            (data) = self.cloudiot_projects_locations_registries_groups_set_iam_policy_with_http_info(resource, **kwargs)  # noqa: E501
            return data

    def cloudiot_projects_locations_registries_groups_set_iam_policy_with_http_info(self, resource, **kwargs):  # noqa: E501
        """cloudiot_projects_locations_registries_groups_set_iam_policy  # noqa: E501

        Sets the access control policy on the specified resource. Replaces any existing policy.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cloudiot_projects_locations_registries_groups_set_iam_policy_with_http_info(resource, async=True)
        >>> result = thread.get()

        :param async bool
        :param str resource: REQUIRED: The resource for which the policy is being specified. See the operation documentation for the appropriate value for this field. (required)
        :param str xgafv: V1 error format.
        :param str access_token: OAuth access token.
        :param str alt: Data format for response.
        :param str bearer_token: OAuth bearer token.
        :param str param_callback: JSONP
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pp: Pretty-print response.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :param str upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :param str upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :param SetIamPolicyRequest set_iam_policy_request:
        :return: Policy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['resource', 'xgafv', 'access_token', 'alt', 'bearer_token', 'param_callback', 'fields', 'key', 'oauth_token', 'pp', 'pretty_print', 'quota_user', 'upload_type', 'upload_protocol', 'set_iam_policy_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cloudiot_projects_locations_registries_groups_set_iam_policy" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'resource' is set
        if ('resource' not in local_var_params or
                local_var_params['resource'] is None):
            raise ValueError("Missing the required parameter `resource` when calling `cloudiot_projects_locations_registries_groups_set_iam_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'resource' in local_var_params:
            path_params['resource'] = local_var_params['resource']  # noqa: E501

        query_params = []
        if 'xgafv' in local_var_params:
            query_params.append(('$.xgafv', local_var_params['xgafv']))  # noqa: E501
        if 'access_token' in local_var_params:
            query_params.append(('access_token', local_var_params['access_token']))  # noqa: E501
        if 'alt' in local_var_params:
            query_params.append(('alt', local_var_params['alt']))  # noqa: E501
        if 'bearer_token' in local_var_params:
            query_params.append(('bearer_token', local_var_params['bearer_token']))  # noqa: E501
        if 'param_callback' in local_var_params:
            query_params.append(('callback', local_var_params['param_callback']))  # noqa: E501
        if 'fields' in local_var_params:
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'key' in local_var_params:
            query_params.append(('key', local_var_params['key']))  # noqa: E501
        if 'oauth_token' in local_var_params:
            query_params.append(('oauth_token', local_var_params['oauth_token']))  # noqa: E501
        if 'pp' in local_var_params:
            query_params.append(('pp', local_var_params['pp']))  # noqa: E501
        if 'pretty_print' in local_var_params:
            query_params.append(('prettyPrint', local_var_params['pretty_print']))  # noqa: E501
        if 'quota_user' in local_var_params:
            query_params.append(('quotaUser', local_var_params['quota_user']))  # noqa: E501
        if 'upload_type' in local_var_params:
            query_params.append(('uploadType', local_var_params['upload_type']))  # noqa: E501
        if 'upload_protocol' in local_var_params:
            query_params.append(('upload_protocol', local_var_params['upload_protocol']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'set_iam_policy_request' in local_var_params:
            body_params = local_var_params['set_iam_policy_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v1/{resource}:setIamPolicy', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Policy',  # noqa: E501
            auth_settings=auth_settings,
            async=local_var_params.get('async'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cloudiot_projects_locations_registries_groups_test_iam_permissions(self, resource, **kwargs):  # noqa: E501
        """cloudiot_projects_locations_registries_groups_test_iam_permissions  # noqa: E501

        Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cloudiot_projects_locations_registries_groups_test_iam_permissions(resource, async=True)
        >>> result = thread.get()

        :param async bool
        :param str resource: REQUIRED: The resource for which the policy detail is being requested. See the operation documentation for the appropriate value for this field. (required)
        :param str xgafv: V1 error format.
        :param str access_token: OAuth access token.
        :param str alt: Data format for response.
        :param str bearer_token: OAuth bearer token.
        :param str param_callback: JSONP
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pp: Pretty-print response.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :param str upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :param str upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :param TestIamPermissionsRequest test_iam_permissions_request:
        :return: TestIamPermissionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.cloudiot_projects_locations_registries_groups_test_iam_permissions_with_http_info(resource, **kwargs)  # noqa: E501
        else:
            (data) = self.cloudiot_projects_locations_registries_groups_test_iam_permissions_with_http_info(resource, **kwargs)  # noqa: E501
            return data

    def cloudiot_projects_locations_registries_groups_test_iam_permissions_with_http_info(self, resource, **kwargs):  # noqa: E501
        """cloudiot_projects_locations_registries_groups_test_iam_permissions  # noqa: E501

        Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a NOT_FOUND error.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cloudiot_projects_locations_registries_groups_test_iam_permissions_with_http_info(resource, async=True)
        >>> result = thread.get()

        :param async bool
        :param str resource: REQUIRED: The resource for which the policy detail is being requested. See the operation documentation for the appropriate value for this field. (required)
        :param str xgafv: V1 error format.
        :param str access_token: OAuth access token.
        :param str alt: Data format for response.
        :param str bearer_token: OAuth bearer token.
        :param str param_callback: JSONP
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pp: Pretty-print response.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :param str upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :param str upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :param TestIamPermissionsRequest test_iam_permissions_request:
        :return: TestIamPermissionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['resource', 'xgafv', 'access_token', 'alt', 'bearer_token', 'param_callback', 'fields', 'key', 'oauth_token', 'pp', 'pretty_print', 'quota_user', 'upload_type', 'upload_protocol', 'test_iam_permissions_request']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cloudiot_projects_locations_registries_groups_test_iam_permissions" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'resource' is set
        if ('resource' not in local_var_params or
                local_var_params['resource'] is None):
            raise ValueError("Missing the required parameter `resource` when calling `cloudiot_projects_locations_registries_groups_test_iam_permissions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'resource' in local_var_params:
            path_params['resource'] = local_var_params['resource']  # noqa: E501

        query_params = []
        if 'xgafv' in local_var_params:
            query_params.append(('$.xgafv', local_var_params['xgafv']))  # noqa: E501
        if 'access_token' in local_var_params:
            query_params.append(('access_token', local_var_params['access_token']))  # noqa: E501
        if 'alt' in local_var_params:
            query_params.append(('alt', local_var_params['alt']))  # noqa: E501
        if 'bearer_token' in local_var_params:
            query_params.append(('bearer_token', local_var_params['bearer_token']))  # noqa: E501
        if 'param_callback' in local_var_params:
            query_params.append(('callback', local_var_params['param_callback']))  # noqa: E501
        if 'fields' in local_var_params:
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'key' in local_var_params:
            query_params.append(('key', local_var_params['key']))  # noqa: E501
        if 'oauth_token' in local_var_params:
            query_params.append(('oauth_token', local_var_params['oauth_token']))  # noqa: E501
        if 'pp' in local_var_params:
            query_params.append(('pp', local_var_params['pp']))  # noqa: E501
        if 'pretty_print' in local_var_params:
            query_params.append(('prettyPrint', local_var_params['pretty_print']))  # noqa: E501
        if 'quota_user' in local_var_params:
            query_params.append(('quotaUser', local_var_params['quota_user']))  # noqa: E501
        if 'upload_type' in local_var_params:
            query_params.append(('uploadType', local_var_params['upload_type']))  # noqa: E501
        if 'upload_protocol' in local_var_params:
            query_params.append(('upload_protocol', local_var_params['upload_protocol']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'test_iam_permissions_request' in local_var_params:
            body_params = local_var_params['test_iam_permissions_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v1/{resource}:testIamPermissions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TestIamPermissionsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=local_var_params.get('async'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cloudiot_projects_locations_registries_list(self, parent, **kwargs):  # noqa: E501
        """cloudiot_projects_locations_registries_list  # noqa: E501

        Lists device registries.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cloudiot_projects_locations_registries_list(parent, async=True)
        >>> result = thread.get()

        :param async bool
        :param str parent: The project and cloud region path. For example, `projects/example-project/locations/us-central1`. (required)
        :param str xgafv: V1 error format.
        :param str access_token: OAuth access token.
        :param str alt: Data format for response.
        :param str bearer_token: OAuth bearer token.
        :param str param_callback: JSONP
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pp: Pretty-print response.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :param str upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :param str upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :param int page_size: The maximum number of registries to return in the response. If this value is zero, the service will select a default size. A call may return fewer objects than requested, but if there is a non-empty `page_token`, it indicates that more entries are available.
        :param str page_token: The value returned by the last `ListDeviceRegistriesResponse`; indicates that this is a continuation of a prior `ListDeviceRegistries` call, and that the system should return the next page of data.
        :return: ListDeviceRegistriesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.cloudiot_projects_locations_registries_list_with_http_info(parent, **kwargs)  # noqa: E501
        else:
            (data) = self.cloudiot_projects_locations_registries_list_with_http_info(parent, **kwargs)  # noqa: E501
            return data

    def cloudiot_projects_locations_registries_list_with_http_info(self, parent, **kwargs):  # noqa: E501
        """cloudiot_projects_locations_registries_list  # noqa: E501

        Lists device registries.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cloudiot_projects_locations_registries_list_with_http_info(parent, async=True)
        >>> result = thread.get()

        :param async bool
        :param str parent: The project and cloud region path. For example, `projects/example-project/locations/us-central1`. (required)
        :param str xgafv: V1 error format.
        :param str access_token: OAuth access token.
        :param str alt: Data format for response.
        :param str bearer_token: OAuth bearer token.
        :param str param_callback: JSONP
        :param str fields: Selector specifying which fields to include in a partial response.
        :param str key: API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.
        :param str oauth_token: OAuth 2.0 token for the current user.
        :param bool pp: Pretty-print response.
        :param bool pretty_print: Returns response with indentations and line breaks.
        :param str quota_user: Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.
        :param str upload_type: Legacy upload protocol for media (e.g. \"media\", \"multipart\").
        :param str upload_protocol: Upload protocol for media (e.g. \"raw\", \"multipart\").
        :param int page_size: The maximum number of registries to return in the response. If this value is zero, the service will select a default size. A call may return fewer objects than requested, but if there is a non-empty `page_token`, it indicates that more entries are available.
        :param str page_token: The value returned by the last `ListDeviceRegistriesResponse`; indicates that this is a continuation of a prior `ListDeviceRegistries` call, and that the system should return the next page of data.
        :return: ListDeviceRegistriesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['parent', 'xgafv', 'access_token', 'alt', 'bearer_token', 'param_callback', 'fields', 'key', 'oauth_token', 'pp', 'pretty_print', 'quota_user', 'upload_type', 'upload_protocol', 'page_size', 'page_token']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cloudiot_projects_locations_registries_list" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'parent' is set
        if ('parent' not in local_var_params or
                local_var_params['parent'] is None):
            raise ValueError("Missing the required parameter `parent` when calling `cloudiot_projects_locations_registries_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'parent' in local_var_params:
            path_params['parent'] = local_var_params['parent']  # noqa: E501

        query_params = []
        if 'xgafv' in local_var_params:
            query_params.append(('$.xgafv', local_var_params['xgafv']))  # noqa: E501
        if 'access_token' in local_var_params:
            query_params.append(('access_token', local_var_params['access_token']))  # noqa: E501
        if 'alt' in local_var_params:
            query_params.append(('alt', local_var_params['alt']))  # noqa: E501
        if 'bearer_token' in local_var_params:
            query_params.append(('bearer_token', local_var_params['bearer_token']))  # noqa: E501
        if 'param_callback' in local_var_params:
            query_params.append(('callback', local_var_params['param_callback']))  # noqa: E501
        if 'fields' in local_var_params:
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'key' in local_var_params:
            query_params.append(('key', local_var_params['key']))  # noqa: E501
        if 'oauth_token' in local_var_params:
            query_params.append(('oauth_token', local_var_params['oauth_token']))  # noqa: E501
        if 'pp' in local_var_params:
            query_params.append(('pp', local_var_params['pp']))  # noqa: E501
        if 'pretty_print' in local_var_params:
            query_params.append(('prettyPrint', local_var_params['pretty_print']))  # noqa: E501
        if 'quota_user' in local_var_params:
            query_params.append(('quotaUser', local_var_params['quota_user']))  # noqa: E501
        if 'upload_type' in local_var_params:
            query_params.append(('uploadType', local_var_params['upload_type']))  # noqa: E501
        if 'upload_protocol' in local_var_params:
            query_params.append(('upload_protocol', local_var_params['upload_protocol']))  # noqa: E501
        if 'page_size' in local_var_params:
            query_params.append(('pageSize', local_var_params['page_size']))  # noqa: E501
        if 'page_token' in local_var_params:
            query_params.append(('pageToken', local_var_params['page_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = ['Oauth2']  # noqa: E501

        return self.api_client.call_api(
            '/v1/{parent}/registries', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListDeviceRegistriesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=local_var_params.get('async'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
