# coding: utf-8

"""

    Manages devices through Devicelink.   # noqa: E501

    OpenAPI spec version: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient


class DefaultApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def devicelink_add_device_to_group(self, group_id, id, **kwargs):  # noqa: E501
        """Adds device to group.  # noqa: E501

        Adds a device to a group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.devicelink_add_device_to_group(group_id, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str group_id: uuid of group (required)
        :param str id: uuid of device (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.devicelink_add_device_to_group_with_http_info(group_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.devicelink_add_device_to_group_with_http_info(group_id, id, **kwargs)  # noqa: E501
            return data

    def devicelink_add_device_to_group_with_http_info(self, group_id, id, **kwargs):  # noqa: E501
        """Adds device to group.  # noqa: E501

        Adds a device to a group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.devicelink_add_device_to_group_with_http_info(group_id, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str group_id: uuid of group (required)
        :param str id: uuid of device (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['group_id', 'id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method devicelink_add_device_to_group" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'group_id' is set
        if ('group_id' not in local_var_params or
                local_var_params['group_id'] is None):
            raise ValueError("Missing the required parameter `group_id` when calling `devicelink_add_device_to_group`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `devicelink_add_device_to_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'group_id' in local_var_params:
            path_params['group_id'] = local_var_params['group_id']  # noqa: E501
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/groups/{group_id}/device/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=local_var_params.get('async'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def devicelink_create_group(self, **kwargs):  # noqa: E501
        """Creates a device group.  # noqa: E501

        Creates virtual group for devices. Request can include list of devices as request-body or attributes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.devicelink_create_group(async=True)
        >>> result = thread.get()

        :param async bool
        :param Body body: List of devices
        :return: InlineResponse201
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.devicelink_create_group_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.devicelink_create_group_with_http_info(**kwargs)  # noqa: E501
            return data

    def devicelink_create_group_with_http_info(self, **kwargs):  # noqa: E501
        """Creates a device group.  # noqa: E501

        Creates virtual group for devices. Request can include list of devices as request-body or attributes.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.devicelink_create_group_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param Body body: List of devices
        :return: InlineResponse201
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method devicelink_create_group" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in local_var_params:
            body_params = local_var_params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/groups', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse201',  # noqa: E501
            auth_settings=auth_settings,
            async=local_var_params.get('async'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def devicelink_delete_group(self, id, **kwargs):  # noqa: E501
        """Deletes a group.  # noqa: E501

        Deletes group and its metadata.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.devicelink_delete_group(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: uuid of group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.devicelink_delete_group_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.devicelink_delete_group_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def devicelink_delete_group_with_http_info(self, id, **kwargs):  # noqa: E501
        """Deletes a group.  # noqa: E501

        Deletes group and its metadata.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.devicelink_delete_group_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: uuid of group (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method devicelink_delete_group" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `devicelink_delete_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/groups/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=local_var_params.get('async'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def devicelink_do_action(self, id, body2, **kwargs):  # noqa: E501
        """Prompts a device action.  # noqa: E501

        Prompts an action on a device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.devicelink_do_action(id, body2, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: uuid of device (required)
        :param Body2 body2: Action that shall be executed (required)
        :return: InlineResponse2011
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.devicelink_do_action_with_http_info(id, body2, **kwargs)  # noqa: E501
        else:
            (data) = self.devicelink_do_action_with_http_info(id, body2, **kwargs)  # noqa: E501
            return data

    def devicelink_do_action_with_http_info(self, id, body2, **kwargs):  # noqa: E501
        """Prompts a device action.  # noqa: E501

        Prompts an action on a device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.devicelink_do_action_with_http_info(id, body2, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: uuid of device (required)
        :param Body2 body2: Action that shall be executed (required)
        :return: InlineResponse2011
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'body2']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method devicelink_do_action" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `devicelink_do_action`")  # noqa: E501
        # verify the required parameter 'body2' is set
        if ('body2' not in local_var_params or
                local_var_params['body2'] is None):
            raise ValueError("Missing the required parameter `body2` when calling `devicelink_do_action`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body2' in local_var_params:
            body_params = local_var_params['body2']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/device/{id}/actions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2011',  # noqa: E501
            auth_settings=auth_settings,
            async=local_var_params.get('async'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def devicelink_get_actions(self, id, **kwargs):  # noqa: E501
        """Gets device actions.  # noqa: E501

        Returns device actions within a time range.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.devicelink_get_actions(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: uuid of device (required)
        :param int _from: Range start in seconds since epoch
        :param int to: Range end in seconds since epoch
        :param int start: The start key of the first action object to return,
        :param str sort: If set to asc (default), action objects are returned in time ascending order (i.e. starting with from or start and ending with stop). If set to desc, action objects are returned in time descending order (i.e. starting with to or start and ending with from).
        :param int count: Limits the number of returned action objects
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.devicelink_get_actions_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.devicelink_get_actions_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def devicelink_get_actions_with_http_info(self, id, **kwargs):  # noqa: E501
        """Gets device actions.  # noqa: E501

        Returns device actions within a time range.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.devicelink_get_actions_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: uuid of device (required)
        :param int _from: Range start in seconds since epoch
        :param int to: Range end in seconds since epoch
        :param int start: The start key of the first action object to return,
        :param str sort: If set to asc (default), action objects are returned in time ascending order (i.e. starting with from or start and ending with stop). If set to desc, action objects are returned in time descending order (i.e. starting with to or start and ending with from).
        :param int count: Limits the number of returned action objects
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', '_from', 'to', 'start', 'sort', 'count']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method devicelink_get_actions" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `devicelink_get_actions`")  # noqa: E501

        if 'count' in local_var_params and local_var_params['count'] > 50000:  # noqa: E501
            raise ValueError("Invalid value for parameter `count` when calling `devicelink_get_actions`, must be a value less than or equal to `50000`")  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `count` when calling `devicelink_get_actions`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if '_from' in local_var_params:
            query_params.append(('from', local_var_params['_from']))  # noqa: E501
        if 'to' in local_var_params:
            query_params.append(('to', local_var_params['to']))  # noqa: E501
        if 'start' in local_var_params:
            query_params.append(('start', local_var_params['start']))  # noqa: E501
        if 'sort' in local_var_params:
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'count' in local_var_params:
            query_params.append(('count', local_var_params['count']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/device/{id}/actions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async=local_var_params.get('async'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def devicelink_get_data(self, id, **kwargs):  # noqa: E501
        """Gets device properties.  # noqa: E501

        Returns properties for a device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.devicelink_get_data(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: uuid of device (required)
        :param int _from: Start time in seconds since epoch
        :param int to: End time in seconds since epoch
        :param int start: The start key of the first property object to return
        :param str sort: Order in which roperty objects are returned
        :param int count: Limits the number of returned property objects
        :param int property_key: Filters returned property objects by property-key
        :param int index: Filters returned property objects by property-index (can only be used in combination with property-key parameter)
        :return: DeviceData
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.devicelink_get_data_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.devicelink_get_data_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def devicelink_get_data_with_http_info(self, id, **kwargs):  # noqa: E501
        """Gets device properties.  # noqa: E501

        Returns properties for a device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.devicelink_get_data_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: uuid of device (required)
        :param int _from: Start time in seconds since epoch
        :param int to: End time in seconds since epoch
        :param int start: The start key of the first property object to return
        :param str sort: Order in which roperty objects are returned
        :param int count: Limits the number of returned property objects
        :param int property_key: Filters returned property objects by property-key
        :param int index: Filters returned property objects by property-index (can only be used in combination with property-key parameter)
        :return: DeviceData
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', '_from', 'to', 'start', 'sort', 'count', 'property_key', 'index']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method devicelink_get_data" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `devicelink_get_data`")  # noqa: E501

        if 'count' in local_var_params and local_var_params['count'] > 50000:  # noqa: E501
            raise ValueError("Invalid value for parameter `count` when calling `devicelink_get_data`, must be a value less than or equal to `50000`")  # noqa: E501
        if 'count' in local_var_params and local_var_params['count'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `count` when calling `devicelink_get_data`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'property_key' in local_var_params and local_var_params['property_key'] > 255:  # noqa: E501
            raise ValueError("Invalid value for parameter `property_key` when calling `devicelink_get_data`, must be a value less than or equal to `255`")  # noqa: E501
        if 'property_key' in local_var_params and local_var_params['property_key'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `property_key` when calling `devicelink_get_data`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'index' in local_var_params and local_var_params['index'] > 255:  # noqa: E501
            raise ValueError("Invalid value for parameter `index` when calling `devicelink_get_data`, must be a value less than or equal to `255`")  # noqa: E501
        if 'index' in local_var_params and local_var_params['index'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `index` when calling `devicelink_get_data`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []
        if '_from' in local_var_params:
            query_params.append(('from', local_var_params['_from']))  # noqa: E501
        if 'to' in local_var_params:
            query_params.append(('to', local_var_params['to']))  # noqa: E501
        if 'start' in local_var_params:
            query_params.append(('start', local_var_params['start']))  # noqa: E501
        if 'sort' in local_var_params:
            query_params.append(('sort', local_var_params['sort']))  # noqa: E501
        if 'count' in local_var_params:
            query_params.append(('count', local_var_params['count']))  # noqa: E501
        if 'property_key' in local_var_params:
            query_params.append(('property-key', local_var_params['property_key']))  # noqa: E501
        if 'index' in local_var_params:
            query_params.append(('index', local_var_params['index']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/device/{id}/properties', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeviceData',  # noqa: E501
            auth_settings=auth_settings,
            async=local_var_params.get('async'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def devicelink_get_device_event(self, id, **kwargs):  # noqa: E501
        """Gets device events.  # noqa: E501

        Opens event-stream for a device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.devicelink_get_device_event(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: uuid of device (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.devicelink_get_device_event_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.devicelink_get_device_event_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def devicelink_get_device_event_with_http_info(self, id, **kwargs):  # noqa: E501
        """Gets device events.  # noqa: E501

        Opens event-stream for a device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.devicelink_get_device_event_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: uuid of device (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method devicelink_get_device_event" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `devicelink_get_device_event`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/event-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/device/{id}/events', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async=local_var_params.get('async'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def devicelink_get_group_info(self, id, **kwargs):  # noqa: E501
        """Gets a device group.  # noqa: E501

        Returns a group, members, and metadata.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.devicelink_get_group_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: uuid of group (required)
        :return: GroupInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.devicelink_get_group_info_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.devicelink_get_group_info_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def devicelink_get_group_info_with_http_info(self, id, **kwargs):  # noqa: E501
        """Gets a device group.  # noqa: E501

        Returns a group, members, and metadata.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.devicelink_get_group_info_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: uuid of group (required)
        :return: GroupInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method devicelink_get_group_info" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `devicelink_get_group_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/groups/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GroupInfo',  # noqa: E501
            auth_settings=auth_settings,
            async=local_var_params.get('async'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def devicelink_get_groups(self, **kwargs):  # noqa: E501
        """Gets device groups.  # noqa: E501

        Returns all groups with devices and metadata.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.devicelink_get_groups(async=True)
        >>> result = thread.get()

        :param async bool
        :return: GroupInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.devicelink_get_groups_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.devicelink_get_groups_with_http_info(**kwargs)  # noqa: E501
            return data

    def devicelink_get_groups_with_http_info(self, **kwargs):  # noqa: E501
        """Gets device groups.  # noqa: E501

        Returns all groups with devices and metadata.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.devicelink_get_groups_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: GroupInfo
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method devicelink_get_groups" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/groups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GroupInfo',  # noqa: E501
            auth_settings=auth_settings,
            async=local_var_params.get('async'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def devicelink_get_specific_action(self, id, action_id, **kwargs):  # noqa: E501
        """Gets a device action.  # noqa: E501

        Returns a action of device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.devicelink_get_specific_action(id, action_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: uuid of device (required)
        :param int action_id: Action key (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.devicelink_get_specific_action_with_http_info(id, action_id, **kwargs)  # noqa: E501
        else:
            (data) = self.devicelink_get_specific_action_with_http_info(id, action_id, **kwargs)  # noqa: E501
            return data

    def devicelink_get_specific_action_with_http_info(self, id, action_id, **kwargs):  # noqa: E501
        """Gets a device action.  # noqa: E501

        Returns a action of device.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.devicelink_get_specific_action_with_http_info(id, action_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: uuid of device (required)
        :param int action_id: Action key (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'action_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method devicelink_get_specific_action" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `devicelink_get_specific_action`")  # noqa: E501
        # verify the required parameter 'action_id' is set
        if ('action_id' not in local_var_params or
                local_var_params['action_id'] is None):
            raise ValueError("Missing the required parameter `action_id` when calling `devicelink_get_specific_action`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'action_id' in local_var_params:
            path_params['action-id'] = local_var_params['action_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/device/{id}/actions/{action-id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async=local_var_params.get('async'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def devicelink_remove_device_from_group(self, id2, id, **kwargs):  # noqa: E501
        """Removes device from a group.  # noqa: E501

        Removes a device from a group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.devicelink_remove_device_from_group(id2, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id2: uuid of group (required)
        :param str id: uuid of device (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.devicelink_remove_device_from_group_with_http_info(id2, id, **kwargs)  # noqa: E501
        else:
            (data) = self.devicelink_remove_device_from_group_with_http_info(id2, id, **kwargs)  # noqa: E501
            return data

    def devicelink_remove_device_from_group_with_http_info(self, id2, id, **kwargs):  # noqa: E501
        """Removes device from a group.  # noqa: E501

        Removes a device from a group.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.devicelink_remove_device_from_group_with_http_info(id2, id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id2: uuid of group (required)
        :param str id: uuid of device (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id2', 'id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method devicelink_remove_device_from_group" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id2' is set
        if ('id2' not in local_var_params or
                local_var_params['id2'] is None):
            raise ValueError("Missing the required parameter `id2` when calling `devicelink_remove_device_from_group`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `devicelink_remove_device_from_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/groups/{group_id}/device/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=local_var_params.get('async'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def devicelink_update_group_metadata(self, id, **kwargs):  # noqa: E501
        """Updates group information.  # noqa: E501

        Updates group metadata.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.devicelink_update_group_metadata(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: uuid of group (required)
        :param Body1 body1: New metadata of group
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.devicelink_update_group_metadata_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.devicelink_update_group_metadata_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def devicelink_update_group_metadata_with_http_info(self, id, **kwargs):  # noqa: E501
        """Updates group information.  # noqa: E501

        Updates group metadata.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.devicelink_update_group_metadata_with_http_info(id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str id: uuid of group (required)
        :param Body1 body1: New metadata of group
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = ['id', 'body1']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method devicelink_update_group_metadata" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in local_var_params or
                local_var_params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `devicelink_update_group_metadata`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body1' in local_var_params:
            body_params = local_var_params['body1']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/v1/groups/{id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=local_var_params.get('async'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
